<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:http="http://cxf.apache.org/transports/http/configuration"
       xmlns:httpj="http://cxf.apache.org/transports/http-jetty/configuration"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xmlns:sec="http://cxf.apache.org/configuration/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://cxf.apache.org/transports/http/configuration
                           http://cxf.apache.org/schemas/configuration/http-conf.xsd
                           http://cxf.apache.org/transports/http-jetty/configuration
                           http://cxf.apache.org/schemas/configuration/http-jetty.xsd
                           http://cxf.apache.org/jaxrs
                           http://cxf.apache.org/schemas/jaxrs.xsd
                           http://cxf.apache.org/configuration/security
                           http://cxf.apache.org/schemas/configuration/security.xsd">

    <context:property-placeholder/>

    <bean id="pnfs-stub" class="org.dcache.cells.CellStub">
        <description>PnfsManager communication stub</description>
        <property name="destination" value="${dcache.service.pnfsmanager}" />
        <property name="timeout" value="30000" />
        <property name="timeoutUnit" value="MILLISECONDS" />
        <property name="retryOnNoRouteToCell" value="true" />
    </bean>

    <bean id="billing-stub" class="org.dcache.cells.CellStub">
        <description>Billing communication stub</description>
        <property name="destination" value="billing" />
        <property name="timeout" value="30000" />
    </bean>

    <bean id="pool-stub" class="org.dcache.cells.CellStub">
        <description>Pool communication stub</description>
        <property name="timeout" value="10000" />
    </bean>

    <bean id="list-handler" class="org.dcache.util.list.ListDirectoryHandler">
        <description>ListDirectoryHandler</description>
        <constructor-arg>
            <bean class="diskCacheV111.util.PnfsHandler">
                <constructor-arg ref="pnfs-stub" />
        </bean>
        </constructor-arg>
    </bean>

    <bean id="pool-manager-stub" class="org.dcache.cells.CellStub">
        <description>PoolManager communication stub</description>
        <property name="destination" value="${cdmi.service.poolmanager}"/>
        <property name="timeout" value="${cdmi.service.poolmanager.timeout}"/>
        <property name="timeoutUnit" value="${cdmi.service.poolmanager.timeout.unit}"/>
    </bean>

    <bean id="scheduled-thread-pool" class="java.util.concurrent.Executors"
        factory-method="newScheduledThreadPool" destroy-method="shutdown">
        <description>Thread pool for scheduled activities</description>
        <constructor-arg value="2"/>
    </bean>

    <bean id="login-strategy" class="org.dcache.auth.UnionLoginStrategy">
        <description>Processes login requests</description>
        <property name="loginStrategies">
            <list>
                <bean class="org.dcache.services.login.RemoteLoginStrategy">
                    <property name="cellStub" ref="login-stub"/>
                </bean>
            </list>
        </property>
        <property name="anonymousAccess" value="${cdmi.authz.anonymous-operations}"/>
    </bean>

    <bean id="login-stub" class="org.dcache.cells.CellStub">
        <description>Login serviceunication stub</description>
        <property name="destination" value="${cdmi.service.gplazma}"/>
        <property name="timeout" value="${cdmi.service.gplazma.timeout}"/>
        <property name="timeoutUnit" value="${cdmi.service.gplazma.timeout.unit}"/>
    </bean>

    <bean id="lb" class="dmg.cells.services.login.LoginBrokerHandler"
        init-method="start" destroy-method="stop">
        <description>Registers the door with a LoginBroker</description>
        <property name="executor" ref="scheduled-thread-pool"/>
        <property name="updateTime" value="${cdmi.service.loginbroker.update-period}"/>
        <property name="updateTimeUnit" value="${cdmi.service.loginbroker.update-period.unit}"/>
        <property name="updateThreshold" value="${cdmi.service.loginbroker.update-threshold}"/>
        <property name="protocolEngine" value="org.dcache.cdmi.dao.impl.DcacheDataObjectDao"/>
        <property name="protocolVersion" value="${cdmi.service.loginbroker.version}"/>
        <property name="protocolFamily" value="${cdmi.service.loginbroker.family}"/>
        <property name="address" value="#{ '${cdmi.net.listen}'.equals('any') ? null : '${cdmi.net.listen}' }"/>
        <property name="port" value="${cdmi.net.ssl.port}"/>
        <property name="loginBrokers" value="${cdmi.service.loginbroker}"/>
        <property name="root" value="${cdmi.root}"/>
    </bean>

    <bean id="banned-ciphers" class="org.dcache.util.Crypto"
          factory-method="getBannedCipherSuitesFromConfigurationValue">
        <constructor-arg value="${cdmi.authn.ciphers}"/>
    </bean>

    <!-- JETTY CONFIG -->

    <context:annotation-config/>

    <context:component-scan base-package="org.snia.cdmiserver"/>
    <context:component-scan base-package="org.dcache.cdmi"/>

    <import resource="classpath:META-INF/cxf/cxf.xml"/>

    <bean id="authorizationInterceptor" class="org.dcache.cdmi.filter.AuthorizationInterceptor">
        <description>Handles authorization for the CDMI door</description>
        <property name="loginStrategy" ref="login-strategy"/>
        <property name="readOnly" value="${cdmi.authz.readonly}"/>
        <property name="enableBasicAuthentication" value="${cdmi.authn.basic}"/>
        <property name="rootPath" value="${cdmi.root}"/>
        <property name="uploadPath" value="${cdmi.authz.upload-directory}"/>
    </bean>

    <bean id="authorizationFilter" class="org.dcache.cdmi.filter.AuthorizationFilter">
        <property name="interceptor" ref="authorizationInterceptor"/>
    </bean>

    <httpj:engine-factory id="http" bus="cxf">
        <httpj:engine port="${cdmi.net.port}">
            <httpj:threadingParameters minThreads="5" maxThreads="15" />
            <httpj:connector>
                <bean id="http-connector" class="org.eclipse.jetty.server.nio.SelectChannelConnector">
                    <property name="port" value="${cdmi.net.port}"/>
                    <property name="host" value="#{ '${cdmi.net.listen}'.equals('any') ? null : '${cdmi.net.listen}' }"/>
                </bean>
            </httpj:connector>
            <httpj:handlers>
                <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
            </httpj:handlers>
            <httpj:sessionSupport>true</httpj:sessionSupport>
        </httpj:engine>
    </httpj:engine-factory>

    <jaxrs:server id="cdmiService" address="http://#{ '${cdmi.net.listen}'.equals('any') ? null : '${cdmi.net.listen}' }:${cdmi.net.port}/"
                  depends-on="http" beanNames="objectIdResource pathResource">
        <jaxrs:providers>
            <ref bean="authorizationFilter"/>
            <ref bean="badRequestExceptionMapper"/>
            <ref bean="conflictExceptionMapper"/>
            <ref bean="containerProvider"/>
            <ref bean="capabilityProvider"/>
            <ref bean="forbiddenExceptionMapper"/>
            <ref bean="notFoundExceptionMapper"/>
            <ref bean="unauthorizedExceptionMapper"/>
            <ref bean="unsupportedOperationExceptionMapper"/>
            <ref bean="methodNotAllowedExceptionMapper"/>
        </jaxrs:providers>
        <jaxrs:serviceBeans>
            <ref bean="objectIdResource"/>
            <ref bean="pathResource"/>
            <ref bean="capabilityResource"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>

    <httpj:engine-factory id="https" bus="cxf">
        <httpj:identifiedTLSServerParameters id="secure">
            <httpj:tlsServerParameters>
                <sec:keyManagers keyPassword="test123">
                    <sec:keyStore type="PKCS12" file="/certs/server/cert.p12" password="test123"/>
                </sec:keyManagers>
                <sec:trustManagers>
                    <sec:keyStore file="/certs/server/truststore.jks" password="test123"/>
                </sec:trustManagers>
            </httpj:tlsServerParameters>
        </httpj:identifiedTLSServerParameters>
        <httpj:engine port="${cdmi.net.ssl.port}">
            <httpj:tlsServerParametersRef id="secure" />
            <httpj:threadingParameters minThreads="5" maxThreads="15" />
            <httpj:connector>
                <bean id="https-connector" class="org.eclipse.jetty.server.ssl.SslSelectChannelConnector">
                    <constructor-arg>
                        <bean class="org.eclipse.jetty.http.ssl.SslContextFactory">
                            <property name="keyStore" value="/certs/server/cert.p12"/>
                            <property name="keyStoreType" value="PKCS12"/>
                            <property name="keyStorePassword" value="test123"/>
                            <property name="trustStore" value="/certs/server/truststore.jks"/>
                            <property name="trustStorePassword" value="test123"/>
                            <property name="wantClientAuth" value="true"/>
                            <property name="needClientAuth" value="true"/>
                            <property name="excludeCipherSuites" ref="banned-ciphers"/>
                        </bean>
                    </constructor-arg>
                    <property name="port" value="${cdmi.net.ssl.port}"/>
                    <property name="host" value="#{ '${cdmi.net.listen}'.equals('any') ? null : '${cdmi.net.listen}' }"/>
                </bean>
            </httpj:connector>
            <httpj:handlers>
                <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
            </httpj:handlers>
            <httpj:sessionSupport>true</httpj:sessionSupport>
        </httpj:engine>
    </httpj:engine-factory>

    <jaxrs:server id="cdmiSSLService" address="https://#{ '${cdmi.net.listen}'.equals('any') ? null : '${cdmi.net.listen}' }:${cdmi.net.ssl.port}/"
                  depends-on="https" beanNames="objectIdResource pathResource">
        <jaxrs:providers>
            <ref bean="authorizationFilter"/>
            <ref bean="badRequestExceptionMapper"/>
            <ref bean="conflictExceptionMapper"/>
            <ref bean="containerProvider"/>
            <ref bean="capabilityProvider"/>
            <ref bean="forbiddenExceptionMapper"/>
            <ref bean="notFoundExceptionMapper"/>
            <ref bean="unauthorizedExceptionMapper"/>
            <ref bean="unsupportedOperationExceptionMapper"/>
            <ref bean="methodNotAllowedExceptionMapper"/>
        </jaxrs:providers>
        <jaxrs:serviceBeans>
            <ref bean="objectIdResource"/>
            <ref bean="pathResource"/>
            <ref bean="capabilityResource"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>

    <httpj:engine-factory id="http-jg" bus="cxf">
        <httpj:engine port="${cdmi.net.ssl-jg.port}">
            <httpj:threadingParameters minThreads="5" maxThreads="15" />
            <httpj:connector>
                <bean id="https-connector" class="org.dcache.util.JettyGSIConnector">
                    <property name="port" value="${cdmi.net.ssl-jg.port}"/>
                    <property name="host" value="#{ '${cdmi.net.listen}'.equals('any') ? null : '${cdmi.net.listen}' }"/>
                    <property name="hostCertificatePath" value="${cdmi.authn.hostcert.cert}"/>
                    <property name="hostKeyPath" value="${cdmi.authn.hostcert.key}"/>
                    <property name="caCertificatePath" value="${cdmi.authn.capath}"/>
                    <property name="autoFlush" value="true"/>
                    <property name="encrypt" value="true"/>
                    <property name="acceptNoClientCerts" value="#{ '$cdmi.authn.accept-client-cert}' == 'false' }"/>
                    <property name="requireClientAuth" value="${cdmi.authn.require-client-cert}"/>
                    <property name="gssMode" value="SSL"/>
                    <property name="hostCertRefreshInterval" value="${cdmi.authn.hostcert.refresh}"/>
                    <property name="hostCertRefreshIntervalUnit" value="${cdmi.authn.hostcert.refresh.unit}"/>
                    <property name="trustAnchorRefreshInterval" value="${cdmi.authn.capath.refresh}"/>
                    <property name="trustAnchorRefreshIntervalUnit" value="${cdmi.authn.capath.refresh.unit}"/>
                    <property name="excludeCipherSuites" ref="banned-ciphers"/>
                </bean>
            </httpj:connector>
            <httpj:handlers>
                <bean class="org.eclipse.jetty.server.handler.DefaultHandler"/>
            </httpj:handlers>
            <httpj:sessionSupport>true</httpj:sessionSupport>
        </httpj:engine>
    </httpj:engine-factory>

    <jaxrs:server id="cdmiSSLJGService" address="http://#{ '${cdmi.net.listen}'.equals('any') ? null : '${cdmi.net.listen}' }:${cdmi.net.ssl-jg.port}/"
                  depends-on="http-jg" beanNames="objectIdResource pathResource">
        <jaxrs:providers>
            <ref bean="authorizationFilter"/>
            <ref bean="badRequestExceptionMapper"/>
            <ref bean="conflictExceptionMapper"/>
            <ref bean="containerProvider"/>
            <ref bean="capabilityProvider"/>
            <ref bean="forbiddenExceptionMapper"/>
            <ref bean="notFoundExceptionMapper"/>
            <ref bean="unauthorizedExceptionMapper"/>
            <ref bean="unsupportedOperationExceptionMapper"/>
            <ref bean="methodNotAllowedExceptionMapper"/>
        </jaxrs:providers>
        <jaxrs:serviceBeans>
            <ref bean="objectIdResource"/>
            <ref bean="pathResource"/>
            <ref bean="capabilityResource"/>
        </jaxrs:serviceBeans>
    </jaxrs:server>

    <bean id="objectIdResource" class="org.dcache.cdmi.resource.DcacheObjectIdResource" scope="prototype">
        <property name="containerDao" ref="containerDao"/>
        <property name="dataObjectDao" ref="dataObjectDao"/>
    </bean>
    <bean id="capabilityResource" class="org.dcache.cdmi.resource.DcacheCapabilityResource" scope="prototype">
         <property name="capabilityDao" ref="capabilityDao"/>
    </bean>
    <bean id="pathResource" class="org.dcache.cdmi.resource.DcachePathResource" scope="prototype">
        <property name="containerDao" ref="containerDao"/>
        <property name="dataObjectDao" ref="dataObjectDao"/>
    </bean>

    <bean id="badRequestExceptionMapper" class="org.snia.cdmiserver.provider.BadRequestExceptionMapper"/>
    <bean id="conflictExceptionMapper" class="org.snia.cdmiserver.provider.ConflictExceptionMapper"/>
    <bean id="containerProvider" class="org.snia.cdmiserver.provider.ContainerProvider"/>
    <bean id="capabilityProvider" class="org.snia.cdmiserver.provider.CapabilityProvider"/>
    <bean id="forbiddenExceptionMapper" class="org.snia.cdmiserver.provider.ForbiddenExceptionMapper"/>
    <bean id="notFoundExceptionMapper" class="org.snia.cdmiserver.provider.NotFoundExceptionMapper"/>
    <bean id="unauthorizedExceptionMapper" class="org.snia.cdmiserver.provider.UnauthorizedExceptionMapper"/>
    <bean id="unsupportedOperationExceptionMapper" class="org.snia.cdmiserver.provider.UnsupportedOperationExceptionMapper"/>
    <bean id="methodNotAllowedExceptionMapper" class="org.dcache.cdmi.provider.MethodNotAllowedExceptionMapper"/>

    <bean id="containerDao" class="org.dcache.cdmi.dao.impl.DcacheContainerDao">
        <property name="baseDirectoryName" value="/public"/>
        <property name="anonymousListing" value="false"/>
        <!-- <property name="anonymousListing" value="${cdmi.authz.anonymous-listing}"/> -->
        <property name="pnfsStub" ref="pnfs-stub"/>
        <property name="listDirectoryHandler" ref="list-handler"/>
        <property name="billingStub" ref="billing-stub"/>
    </bean>

    <bean id="dataObjectDao" class="org.dcache.cdmi.dao.impl.DcacheDataObjectDao">
        <property name="baseDirectoryName" value="/public"/>
        <property name="anonymousListing" value="false"/>
        <!-- <property name="anonymousListing" value="${cdmi.authz.anonymous-listing}"/> -->
        <property name="executor" ref="scheduled-thread-pool"/>
        <property name="pnfsStub" ref="pnfs-stub"/>
        <property name="listDirectoryHandler" ref="list-handler"/>
        <property name="poolMgrStub" ref="pool-manager-stub"/>
        <property name="poolStub" ref="pool-stub"/>
        <property name="billingStub" ref="billing-stub"/>
    </bean>

    <bean id="capabilityDao" class="org.dcache.cdmi.dao.impl.DcacheCapabilityDao">
        <property name="baseDirectoryName" value="/"/>
        <property name="pnfsStub" ref="pnfs-stub"/>
    </bean>

</beans>
