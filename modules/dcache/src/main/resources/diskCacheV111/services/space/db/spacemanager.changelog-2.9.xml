<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
				       http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet id="3" author="behrmann">
        <comment>Delete all ALLOCATED file reservations</comment>
        <sql>DELETE FROM srmspacefile WHERE state = 0</sql>
        <rollback/>
    </changeSet>

    <changeSet id="5" author="behrmann">
        <sql>DELETE FROM srmspacefile WHERE deleted = 1</sql>
        <dropColumn tableName="srmspacefile" columnName="deleted"/>
        <rollback>
            <addColumn tableName="srmspacefile">
                <column name="deleted" type="int"/>
            </addColumn>
        </rollback>
    </changeSet>

    <changeSet id="hsqldb.trigger.1" author="behrmann" dbms="hsqldb">
        <comment>Drop srmspace triggers before renaming srmlinkgroup columns</comment>
        <sql>DROP TRIGGER tgr_srmspace_insert IF EXISTS</sql>
        <sql>DROP TRIGGER tgr_srmspace_delete IF EXISTS</sql>
        <sql>DROP TRIGGER tgr_srmspace_update IF EXISTS</sql>

        <rollback>
            <sql>DROP TRIGGER tgr_srmspace_insert IF EXISTS</sql>
            <createProcedure>
                CREATE TRIGGER tgr_srmspace_insert AFTER INSERT ON srmspace
                    REFERENCING NEW ROW AS space
                    FOR EACH ROW
                    BEGIN ATOMIC
                        IF space.usedspaceinbytes &lt;&gt; 0 OR space.allocatedspaceinbytes &lt;&gt; 0 THEN
                            SIGNAL SQLSTATE '23D02' SET MESSAGE_TEXT = 'Space reservations must be created empty.';
                        END IF;
                        IF space.state = 0 THEN
                            UPDATE srmlinkgroup
                                SET reservedspaceinbytes = reservedspaceinbytes + space.sizeinbytes
                                WHERE id = space.linkgroupid AND space.sizeinbytes &lt;= freespaceinbytes - reservedspaceinbytes;
                            IF DIAGNOSTICS(ROW_COUNT) = 0 THEN
                                SIGNAL SQLSTATE '23D01' SET MESSAGE_TEXT = 'Not enough free space in link group.';
                            END IF;
                        END IF;
                    END;
            </createProcedure>

            <sql>DROP TRIGGER tgr_srmspace_delete IF EXISTS</sql>
            <createProcedure>
                CREATE TRIGGER tgr_srmspace_delete AFTER DELETE ON srmspace
                    REFERENCING OLD ROW AS space
                    FOR EACH ROW WHEN (space.state = 0)
                    UPDATE srmlinkgroup
                        SET reservedspaceinbytes = reservedspaceinbytes - (space.sizeinbytes - space.usedspaceinbytes)
                        WHERE id = space.linkgroupid;
            </createProcedure>

            <sql>DROP TRIGGER tgr_srmspace_update IF EXISTS</sql>
            <createProcedure>
                CREATE TRIGGER tgr_srmspace_update AFTER UPDATE ON srmspace
                    REFERENCING OLD ROW AS old NEW ROW AS new
                    FOR EACH ROW
                    BEGIN ATOMIC
                        IF old.linkgroupid &lt;&gt; new.linkgroupid THEN
                            SIGNAL SQLSTATE '23D03' SET MESSAGE_TEXT = 'Cannot move reservations between link groups.';
                        END IF;

                        IF old.state = 0 AND new.state = 0 THEN
                            IF old.sizeinbytes &lt;&gt; new.sizeinbytes OR old.usedspaceinbytes &lt;&gt; new.usedspaceinbytes THEN
                                IF old.sizeinbytes >= new.sizeinbytes THEN
                                    -- Size is unchanged or downsized, always okay
                                    UPDATE srmlinkgroup
                                        SET reservedspaceinbytes = reservedspaceinbytes + (new.sizeinbytes - new.usedspaceinbytes) - (old.sizeinbytes - old.usedspaceinbytes),
                                            freespaceinbytes = GREATEST(LEAST(freespaceinbytes, freespaceinbytes - new.usedspaceinbytes + old.usedspaceinbytes), 0)
                                        WHERE id = old.linkgroupid;
                                ELSE
                                    -- Increased reservation, okay if space is available
                                    UPDATE srmlinkgroup
                                        SET reservedspaceinbytes = reservedspaceinbytes + (new.sizeinbytes - new.usedspaceinbytes) - (old.sizeinbytes - old.usedspaceinbytes),
                                            freespaceinbytes = GREATEST(LEAST(freespaceinbytes, freespaceinbytes - new.usedspaceinbytes + old.usedspaceinbytes), 0)
                                        WHERE id = old.linkgroupid AND new.sizeinbytes - old.sizeinbytes &lt;= freespaceinbytes - reservedspaceinbytes;
                                    IF DIAGNOSTICS(ROW_COUNT) = 0 THEN
                                        SIGNAL SQLSTATE '23D01' SET MESSAGE_TEXT = 'Not enough free space in link group.';
                                    END IF;
                                END IF;
                            END IF;
                        ELSEIF old.state = 0 AND new.state &lt;&gt; 0 THEN
                            UPDATE srmlinkgroup
                                SET reservedspaceinbytes = reservedspaceinbytes - (old.sizeinBytes - old.usedspaceinbytes)
                                WHERE id = old.linkgroupid;
                        ELSEIF old.state &lt;&gt; 0 AND new.state = 0 THEN
                            UPDATE srmlinkgroup
                                SET reservedspaceinbytes = reservedspaceinbytes + (new.sizeinbytes - new.usedspaceinbytes),
                                    freespaceinbytes = GREATEST(freespaceinbytes - new.usedspaceinbytes, 0)
                                WHERE id = new.linkgroupid AND new.sizeinbytes - new.usedspaceinbytes &lt;= freespaceinbytes - reservedspaceinbytes;
                            IF DIAGNOSTICS(ROW_COUNT) = 0 THEN
                                SIGNAL SQLSTATE '23D01' SET MESSAGE_TEXT = 'Not enough free space in link group.';
                            END IF;
                        END IF;
                    END;
            </createProcedure>
        </rollback>
    </changeSet>

    <changeSet id="1" author="behrmann">
        <comment>Replace free space column with available space column</comment>
        <renameColumn tableName="srmlinkgroup" oldColumnName="freespaceinbytes" newColumnName="availablespaceinbytes" columnDataType="bigint"/>
        <sql>UPDATE srmlinkgroup SET availablespaceinbytes = availablespaceinbytes - reservedspaceinbytes</sql>

        <rollback>
            <renameColumn tableName="srmlinkgroup" oldColumnName="availablespaceinbytes" newColumnName="freespaceinbytes" columnDataType="bigint"/>
            <sql>UPDATE srmlinkgroup SET freespaceinbytes = freespaceinbytes + reservedspaceinbytes</sql>
        </rollback>
    </changeSet>

    <changeSet id="hsqldb.trigger.2" author="behrmann" dbms="hsqldb">
        <comment>Create srmspace triggers for maintaining accumulated fields</comment>
        <sql>DROP TRIGGER tgr_srmspace_insert IF EXISTS</sql>
        <createProcedure>
            CREATE TRIGGER tgr_srmspace_insert AFTER INSERT ON srmspace
                REFERENCING NEW ROW AS space
                FOR EACH ROW
                BEGIN ATOMIC
                    IF space.usedspaceinbytes &lt;&gt; 0 OR space.allocatedspaceinbytes &lt;&gt; 0 THEN
                        SIGNAL SQLSTATE '23D02' SET MESSAGE_TEXT = 'Space reservations must be created empty.';
                    END IF;
                    IF space.state = 0 THEN
                        UPDATE srmlinkgroup
                            SET reservedspaceinbytes = reservedspaceinbytes + space.sizeinbytes,
                                availablespaceinbytes = availablespaceinbytes - space.sizeinbytes
                            WHERE id = space.linkgroupid AND space.sizeinbytes &lt;= availablespaceinbytes;
                        IF DIAGNOSTICS(ROW_COUNT) = 0 THEN
                            SIGNAL SQLSTATE '23D01' SET MESSAGE_TEXT = 'Not enough free space in link group.';
                        END IF;
                    END IF;
                END;
        </createProcedure>

        <sql>DROP TRIGGER tgr_srmspace_delete IF EXISTS</sql>
        <createProcedure>
            CREATE TRIGGER tgr_srmspace_delete AFTER DELETE ON srmspace
                REFERENCING OLD ROW AS space
                FOR EACH ROW WHEN (space.state = 0)
                UPDATE srmlinkgroup
                    SET reservedspaceinbytes = reservedspaceinbytes - (space.sizeinbytes - space.usedspaceinbytes),
                        availablespaceinbytes = availablespaceinbytes + (space.sizeinbytes - space.usedspaceinbytes)
                    WHERE id = space.linkgroupid;
        </createProcedure>

        <sql>DROP TRIGGER tgr_srmspace_update IF EXISTS</sql>
        <createProcedure>
            CREATE TRIGGER tgr_srmspace_update AFTER UPDATE ON srmspace
                REFERENCING OLD ROW AS old NEW ROW AS new
                FOR EACH ROW
                BEGIN ATOMIC
                    IF old.linkgroupid &lt;&gt; new.linkgroupid THEN
                        SIGNAL SQLSTATE '23D03' SET MESSAGE_TEXT = 'Cannot move reservations between link groups.';
                    END IF;

                    IF old.state = 0 AND new.state = 0 THEN
                        IF old.sizeinbytes &lt;&gt; new.sizeinbytes OR old.usedspaceinbytes &lt;&gt; new.usedspaceinbytes THEN
                            IF old.sizeinbytes >= new.sizeinbytes THEN
                                -- Size is unchanged or downsized, always okay
                                UPDATE srmlinkgroup
                                    SET reservedspaceinbytes = reservedspaceinbytes + (new.sizeinbytes - new.usedspaceinbytes) - (old.sizeinbytes - old.usedspaceinbytes),
                                        availablespaceinbytes = availablespaceinbytes - (new.sizeinbytes - old.sizeinbytes)
                                    WHERE id = old.linkgroupid;
                            ELSE
                                -- Increased reservation, okay if space is available
                                UPDATE srmlinkgroup
                                    SET reservedspaceinbytes = reservedspaceinbytes + (new.sizeinbytes - new.usedspaceinbytes) - (old.sizeinbytes - old.usedspaceinbytes),
                                        availablespaceinbytes = availablespaceinbytes - (new.sizeinbytes - old.sizeinbytes)
                                    WHERE id = old.linkgroupid AND new.sizeinbytes - old.sizeinbytes &lt;= availablespaceinbytes;
                                IF DIAGNOSTICS(ROW_COUNT) = 0 THEN
                                    SIGNAL SQLSTATE '23D01' SET MESSAGE_TEXT = 'Not enough free space in link group.';
                                END IF;
                            END IF;
                        END IF;
                    ELSEIF old.state = 0 AND new.state &lt;&gt; 0 THEN
                        UPDATE srmlinkgroup
                            SET reservedspaceinbytes = reservedspaceinbytes - (old.sizeinbytes - old.usedspaceinbytes),
                                availablespaceinbytes = availablespaceinbytes + (old.sizeinbytes - old.usedspaceinbytes)
                            WHERE id = old.linkgroupid;
                    ELSEIF old.state &lt;&gt; 0 AND new.state = 0 THEN
                        UPDATE srmlinkgroup
                            SET reservedspaceinbytes = reservedspaceinbytes + (new.sizeinbytes - new.usedspaceinbytes),
                                availablespaceinbytes = availablespaceinbytes - (new.sizeinbytes - new.usedspaceinbytes)
                            WHERE id = new.linkgroupid AND new.sizeinbytes - new.usedspaceinbytes &lt;= availablespaceinbytes;
                        IF DIAGNOSTICS(ROW_COUNT) = 0 THEN
                            SIGNAL SQLSTATE '23D01' SET MESSAGE_TEXT = 'Not enough free space in link group.';
                        END IF;
                    END IF;
                END;
        </createProcedure>

        <rollback>
            <sql>DROP TRIGGER tgr_srmspace_insert IF EXISTS</sql>
            <sql>DROP TRIGGER tgr_srmspace_delete IF EXISTS</sql>
            <sql>DROP TRIGGER tgr_srmspace_update IF EXISTS</sql>
        </rollback>
    </changeSet>

    <changeSet id="postgresql.trigger.2" author="behrmann" dbms="postgresql">
        <comment>Create srmspace triggers for maintaining accumulated fields</comment>
        <createProcedure>
            CREATE OR REPLACE FUNCTION f_srmspace_on_insert() RETURNS TRIGGER AS  $$
            BEGIN
                IF NEW.usedspaceinbytes != 0 OR NEW.allocatedspaceinbytes != 0 THEN
                    RAISE SQLSTATE '23D02' USING MESSAGE = 'Space reservation must be empty at time of creation.';
                END IF;
                IF NEW.state = 0 THEN
                    UPDATE srmlinkgroup
                        SET reservedspaceinbytes = reservedspaceinbytes + NEW.sizeinbytes,
                            availablespaceinbytes = availablespaceinbytes - NEW.sizeinbytes
                        WHERE id = NEW.linkgroupid AND NEW.sizeinbytes &lt;= availablespaceinbytes;

                    IF NOT FOUND THEN
                        RAISE SQLSTATE '23D01' USING MESSAGE = 'Not enough free space in link group.';
                    END IF;
                END IF;
                RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;

            DROP TRIGGER IF EXISTS tgr_srmspace_insert ON srmspace;
            CREATE TRIGGER tgr_srmspace_insert AFTER INSERT ON srmspace FOR EACH ROW EXECUTE PROCEDURE f_srmspace_on_insert();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION f_srmspace_on_update() RETURNS TRIGGER AS  $$
            BEGIN
                IF old.linkgroupid != new.linkgroupid THEN
                    RAISE SQLSTATE '23D03' USING MESSAGE = 'Cannot move reservations between link groups.';
                END IF;

                IF OLD.state = 0 AND NEW.state = 0 THEN
                    IF OLD.sizeinbytes != NEW.sizeinbytes OR OLD.usedspaceinbytes != NEW.usedspaceinbytes THEN
                        IF OLD.sizeinbytes >= NEW.sizeinbytes THEN
                            -- Size is unchanged or downsized, always okay
                            UPDATE srmlinkgroup
                                SET reservedspaceinbytes = reservedspaceinbytes + (NEW.sizeinbytes - NEW.usedspaceinbytes) - (OLD.sizeinbytes - OLD.usedspaceinbytes),
                                    availablespaceinbytes = availablespaceinbytes - (NEW.sizeinbytes - OLD.sizeinbytes)
                                WHERE id = OLD.linkgroupid;
                        ELSE
                            -- Increased reservation, okay if space is available
                            UPDATE srmlinkgroup
                                SET reservedspaceinbytes = reservedspaceinbytes + (NEW.sizeinbytes - NEW.usedspaceinbytes) - (OLD.sizeinbytes - OLD.usedspaceinbytes),
                                    availablespaceinbytes = availablespaceinbytes - (NEW.sizeinbytes - OLD.sizeinbytes)
                                WHERE id = OLD.linkgroupid AND NEW.sizeinbytes - OLD.sizeinbytes &lt;= availablespaceinbytes;
                            IF NOT FOUND THEN
                                RAISE SQLSTATE '23D01' USING MESSAGE = 'Not enough free space in link group.';
                            END IF;
                        END IF;
                    END IF;
                ELSEIF OLD.state = 0 AND NEW.state != 0 THEN
                    UPDATE srmlinkgroup
                        SET reservedspaceinbytes = reservedspaceinbytes - (OLD.sizeinBytes - OLD.usedspaceinbytes),
                            availablespaceinbytes = availablespaceinbytes + (OLD.sizeinbytes - OLD.usedspaceinbytes)
                        WHERE id = OLD.linkgroupid;
                ELSEIF OLD.state != 0 AND NEW.state = 0 THEN
                    UPDATE srmlinkgroup
                        SET reservedspaceinbytes = reservedspaceinbytes + (NEW.sizeinbytes - NEW.usedspaceinbytes),
                            availablespaceinbytes = availablespaceinbytes - (NEW.sizeinbytes - NEW.usedspaceinbytes)
                        WHERE id = NEW.linkgroupid AND NEW.sizeinbytes - NEW.usedspaceinbytes &lt;= availablespaceinbytes;
                    IF NOT FOUND THEN
                        RAISE SQLSTATE '23D01' USING MESSAGE = 'Not enough free space in link group.';
                    END IF;
                END IF;
                RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;

            DROP TRIGGER IF EXISTS tgr_srmspace_update ON srmspace;
            CREATE TRIGGER tgr_srmspace_update AFTER UPDATE ON srmspace FOR EACH ROW EXECUTE PROCEDURE f_srmspace_on_update();
        </createProcedure>

        <createProcedure>
            CREATE OR REPLACE FUNCTION f_srmspace_on_delete() RETURNS TRIGGER AS  $$
            BEGIN
                IF OLD.state = 0 THEN
                    UPDATE srmlinkgroup
                        SET reservedspaceinbytes = reservedspaceinbytes - (OLD.sizeinbytes - OLD.usedspaceinbytes),
                            availablespaceinbytes = availablespaceinbytes + (OLD.sizeinbytes - OLD.usedspaceinbytes)
                        WHERE id = OLD.linkgroupid;
                END IF;
                RETURN NULL;
            END;
            $$
            LANGUAGE plpgsql;

            DROP TRIGGER IF EXISTS tgr_srmspace_delete ON srmspace;
            CREATE TRIGGER tgr_srmspace_delete AFTER DELETE ON srmspace FOR EACH ROW EXECUTE PROCEDURE f_srmspace_on_delete();
        </createProcedure>

        <rollback>
            <createProcedure>
                CREATE OR REPLACE FUNCTION f_srmspace_on_insert() RETURNS TRIGGER AS  $$
                BEGIN
                    IF NEW.usedspaceinbytes != 0 OR NEW.allocatedspaceinbytes != 0 THEN
                        RAISE SQLSTATE '23D02' USING MESSAGE = 'Space reservation must be empty at time of creation.';
                    END IF;
                    IF NEW.state = 0 THEN
                        UPDATE srmlinkgroup
                            SET reservedspaceinbytes = reservedspaceinbytes + NEW.sizeinbytes
                            WHERE id = NEW.linkgroupid AND NEW.sizeinbytes &lt;= freespaceinbytes - reservedspaceinbytes;

                        IF NOT FOUND THEN
                            RAISE SQLSTATE '23D01' USING MESSAGE = 'Not enough free space in link group.';
                        END IF;
                    END IF;
                    RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                DROP TRIGGER IF EXISTS tgr_srmspace_insert ON srmspace;
                CREATE TRIGGER tgr_srmspace_insert AFTER INSERT ON srmspace FOR EACH ROW EXECUTE PROCEDURE f_srmspace_on_insert();
            </createProcedure>

            <createProcedure>
                CREATE OR REPLACE FUNCTION f_srmspace_on_update() RETURNS TRIGGER AS  $$
                BEGIN
                    IF old.linkgroupid != new.linkgroupid THEN
                        RAISE SQLSTATE '23D03' USING MESSAGE = 'Cannot move reservations between link groups.';
                    END IF;

                    IF OLD.state = 0 AND NEW.state = 0 THEN
                        IF OLD.sizeinbytes != NEW.sizeinbytes OR OLD.usedspaceinbytes != NEW.usedspaceinbytes THEN
                            IF OLD.sizeinbytes >= NEW.sizeinbytes THEN
                                -- Size is unchanged or downsized, always okay
                                UPDATE srmlinkgroup
                                    SET reservedspaceinbytes = reservedspaceinbytes + (NEW.sizeinbytes - NEW.usedspaceinbytes) - (OLD.sizeinbytes - OLD.usedspaceinbytes),
                                        freespaceinbytes = GREATEST(LEAST(freespaceinbytes, freespaceinbytes - NEW.usedspaceinbytes + OLD.usedspaceinbytes), 0)
                                    WHERE id = OLD.linkgroupid;
                            ELSE
                                -- Increased reservation, okay if space is available
                                UPDATE srmlinkgroup
                                    SET reservedspaceinbytes = reservedspaceinbytes + (NEW.sizeinbytes - NEW.usedspaceinbytes) - (OLD.sizeinbytes - OLD.usedspaceinbytes),
                                        freespaceinbytes = GREATEST(LEAST(freespaceinbytes, freespaceinbytes - NEW.usedspaceinbytes + OLD.usedspaceinbytes), 0)
                                    WHERE id = OLD.linkgroupid AND NEW.sizeinbytes - OLD.sizeinbytes &lt;= freespaceinbytes - reservedspaceinbytes;
                                IF NOT FOUND THEN
                                    RAISE SQLSTATE '23D01' USING MESSAGE = 'Not enough free space in link group.';
                                END IF;
                            END IF;
                        END IF;
                    ELSEIF OLD.state = 0 AND NEW.state != 0 THEN
                        UPDATE srmlinkgroup
                            SET reservedspaceinbytes = reservedspaceinbytes - (OLD.sizeinBytes - OLD.usedspaceinbytes)
                            WHERE id = OLD.linkgroupid;
                    ELSEIF OLD.state != 0 AND NEW.state = 0 THEN
                        UPDATE srmlinkgroup
                            SET reservedspaceinbytes = reservedspaceinbytes + (NEW.sizeinbytes - NEW.usedspaceinbytes),
                                freespaceinbytes = GREATEST(freespaceinbytes - NEW.usedspaceinbytes, 0)
                            WHERE id = NEW.linkgroupid AND NEW.sizeinbytes - NEW.usedspaceinbytes &lt;= freespaceinbytes - reservedspaceinbytes;
                        IF NOT FOUND THEN
                            RAISE SQLSTATE '23D01' USING MESSAGE = 'Not enough free space in link group.';
                        END IF;
                    END IF;
                    RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                DROP TRIGGER IF EXISTS tgr_srmspace_update ON srmspace;
                CREATE TRIGGER tgr_srmspace_update AFTER UPDATE ON srmspace FOR EACH ROW EXECUTE PROCEDURE f_srmspace_on_update();
            </createProcedure>

            <createProcedure>
                CREATE OR REPLACE FUNCTION f_srmspace_on_delete() RETURNS TRIGGER AS  $$
                BEGIN
                    IF OLD.state = 0 THEN
                        UPDATE srmlinkgroup SET reservedspaceinbytes = reservedspaceinbytes - OLD.sizeinbytes + OLD.usedspaceinbytes WHERE id = OLD.linkgroupid;
                    END IF;
                    RETURN NULL;
                END;
                $$
                LANGUAGE plpgsql;

                DROP TRIGGER IF EXISTS tgr_srmspace_delete ON srmspace;
                CREATE TRIGGER tgr_srmspace_delete AFTER DELETE ON srmspace FOR EACH ROW EXECUTE PROCEDURE f_srmspace_on_delete();
            </createProcedure>
        </rollback>
    </changeSet>

    <changeSet id="2" author="behrmann">
        <comment>Drop pnfspath column</comment>
        <dropUniqueConstraint tableName="srmspacefile" constraintName="srmspacefile_pnfspath_unique"/>
        <dropColumn tableName="srmspacefile" columnName="pnfspath"/>
        <rollback>
            <addColumn tableName="srmspacefile">
                <column name="pnfspath" type="varchar(32672)" beforeColumn="pnfsid"/>
            </addColumn>
            <addUniqueConstraint tableName="srmspacefile" columnNames="pnfspath" constraintName="srmspacefile_pnfspath_unique"/>
        </rollback>
    </changeSet>

    <changeSet id="4" author="behrmann">
        <dropIndex tableName="srmspacefile" indexName="srmspacefile_expirationtime_idx"/>
        <dropColumn tableName="srmspacefile" columnName="expirationtime"/>
        <rollback>
            <addColumn tableName="srmspacefile">
                <column name="expirationtime" type="bigint"/>
            </addColumn>
            <createIndex tableName="srmspacefile" indexName="srmspacefile_expirationtime_idx">
                <column name="expirationtime"/>
            </createIndex>
        </rollback>
    </changeSet>

</databaseChangeLog>