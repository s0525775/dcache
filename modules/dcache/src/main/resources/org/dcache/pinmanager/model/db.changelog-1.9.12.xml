<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.1.xsd">

    <changeSet author="behrmann" id="1">
        <comment>Tables for new pin manager introduced in 1.9.12</comment>

        <createTable tableName="pins">
            <column name="id" type="bigint">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="pnfsid" type="varchar(256)">
                <constraints nullable="false"/>
            </column>
            <column name="request_id" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
            <column name="created_at" type="timestamp">
                <constraints nullable="false"/>
            </column>
            <column name="expires_at" type="timestamp">
                <constraints nullable="true"/>
            </column>
            <column name="uid" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="gid" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="state" type="varchar(256)">
                <constraints nullable="false"/>
            </column>
            <column name="pool" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
            <column name="sticky" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
        </createTable>

        <createIndex tableName="pins"
                     indexName="idx_pnfsid_id"
                     unique="true">
          <column name="pnfsid"/>
          <column name="request_id"/>
        </createIndex>

        <createIndex tableName="pins"
                     indexName="idx_state">
          <column name="state"/>
        </createIndex>

        <createIndex tableName="pins"
                     indexName="idx_expires_at">
          <column name="expires_at"/>
        </createIndex>

        <createSequence sequenceName="pin_sequence"
                        minValue="1" incrementBy="10"/>
    </changeSet>

    <changeSet author="behrmann" id="2" dbms="postgresql">
        <preConditions onFail="MARK_RAN">
            <!-- Only run this change set if we are not upgrading from
                 an unmanaged version. Otherwise we simply skip the
                 change set. -->
            <tableExists tableName="pinsv3"/>
        </preConditions>
        <comment>Import pins from versions 1.9.2 to 1.9.12</comment>
        <sql>
            -- Primary groups are not represented explicitly in the old
            -- schema. The primary group is identified by the group
            -- with the lowest id field (which isn't the same as the gid).

            CREATE TEMPORARY TABLE primarygroups
              ON COMMIT DROP
              AS SELECT authrecord_id, gid
                 FROM (SELECT authrecord_id, min(authgroup.id) as group_id
                       FROM authgrouplist INNER JOIN authgroup
                            ON authgrouplist.id = authgroup.grouplist_id
                       GROUP BY authgrouplist.authrecord_id
                      ) p
                      INNER JOIN authgroup ON p.group_id = authgroup.id;

            INSERT INTO pins (id, pnfsid, request_id, created_at, expires_at, uid, gid, state, pool, sticky)
            SELECT r.id,
                   p.pnfsid,
                   NULLIF(r.srmid, 0),
                   CASE r.creation
                       WHEN -1 THEN now()
                       ELSE (SELECT timestamp with time zone 'epoch' + r.creation * interval '1 ms')
                   END,
                   CASE r.expiration
                       WHEN -1 THEN null
                       ELSE (SELECT timestamp with time zone 'epoch' + r.expiration * interval '1 ms')
                   END,
                   COALESCE(a.uid, 0),
                   COALESCE(g.gid, 0),
                   CASE p.state
                       WHEN 4 THEN 'PINNED'
                       ELSE 'UNPINNING'
                   END,
                   p.pool,
                   'PinManager' || p.id
                   FROM pinsv3 p
                   INNER JOIN pinrequestsv3 r ON p.id = r.pinid
                   LEFT JOIN authrecord a ON r.authrecid = a.id
                   LEFT JOIN primarygroups g ON a.id = g.authrecord_id;

            SELECT setval('pin_sequence', max(id)) FROM pins WHERE id > 0;
        </sql>

        <rollback/>
    </changeSet>
</databaseChangeLog>
