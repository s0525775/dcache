#!/bin/sh

set -e

name=$(basename $0)

rel_path=@TARGET@/dcache/etc/grid-security
mkdir -p $rel_path/certificates
TARGET_DIR=$(cd $rel_path;pwd)
TARGET_TRUST_STORE=$TARGET_DIR/certificates

OUR_TRUST_STORE=$HOME/.globus/dcache-systemtest-certificates
USER_TRUST_STORE=$HOME/.globus/certificates
HOST_CRED_STORE=$HOME/.globus

while [ $# -gt 0 ]; do
    case "$1" in
	--only-localhost)
	    only_localhost=1
	    shift
	    ;;

	--install)
	    install=1
	    shift
	    ;;

	--user)
	    user=1
	    shift
	    ;;

	--name=*)
	    username=${1##--name=}
	    shift
	    ;;

	--email=*)
	    email=${1##--email=}
	    shift
	    ;;

	--clean)
	    clean=1
	    shift
	    ;;

	--generate)
	    generate=1
	    shift
	    ;;

	--help|-h)
	    echo "Usage:"
	    echo "    $name --generate [--only-localhost] [--user [--name=<name>] [--email=<email>]]"
	    echo "    $name --install"
	    echo "    $name --clean"
	    echo
	    echo "Tool for managing grid host and user X.509 credentials suitable for testing dCache"
	    echo
	    echo "Commands:"
	    echo "     --generate         create new CA and host credentials, and optionally user credentials"
	    echo "     --install          install (\"trust\") any missing certificate material"
	    echo "     --clean            remove managed files from the ~/.globus directory"
	    echo "  -h --help             provide this information"
	    echo
	    echo "Options:"
	    echo "     --only-localhost   only include 'localhost' as subjAltName in host certificate"
	    echo "     --user             also generate a user certificate"
	    echo "     --name=<name>      use <name> instead of output from 'git config user.name'"
	    echo "     --email=<address>  use <address> instead of output from 'git config user.emil'"
	    echo
	    echo "This tool has three modes of operation: generating new credentials,"
	    echo "trusting dCache credentials and removing files.  These correspond to"
	    echo "the --generate, --install and --clean commands respectively"
	    echo
	    echo "GENERATE:"
	    echo
	    echo "The --generate command will create CA credentials (a private key and"
	    echo "self-signed certificate) and, using this CA, generate host credentials"
	    echo "(another private key and certificate).  It can optionally generate user"
	    echo "credentals (another private key and certificate) that may be used to authenticate"
	    echo "as a user when testing dCache."
	    echo
            echo "The CA's private key is destroyed after it has been used to sign the host"
	    echo "certificate and any user certificate.  Therefore, this CA cannot sign any further"
	    echo "certificates, which allows the CA to be trusted unequivocally.  Fresh"
	    echo "credentials may be generated only by re-running this script, which will"
	    echo "generate a fresh CA."
	    echo
	    echo "The generated CA certificate and host credentials are stored in the"
	    echo "current system-test deployment and also in the users ~/.globus directory."
	    echo "The user's trust store is also updated so that users will trust the new CA."
	    echo
	    echo "SubjectAlternativeName"
	    echo
	    echo "In general, a certificate may include zero or more Subject Alternative"
	    echo "Names.  For a host certificate, such Subject Alternative Names can"
	    echo "include all the DNS names through which this machine may be contacted."
	    echo
	    echo "By default, this script generates a host certificate with Subject"
	    echo "Alternative Name of 'localhost', the output of running 'uname -n'"
	    echo "and as many other FQDNs as can be discovered.  This host certificate will always"
	    echo "work, but is specific to the host it was generated on, and (in general) cannot"
	    echo "be shared between hosts."
	    echo
	    echo "The '--only-localhost' option limits the Subject Alternative Names"
	    echo "to just 'localhost'.  The resulting certificate should work when client"
	    echo "connects to 'localhost'.  It is generic, so may be stored in a VCS."
	    echo "However, on some platforms, clients that use Globus native libraries"
	    echo "seem unable to use this certificate."
	    echo
	    echo "User credentials"
	    echo
	    echo "The --user option requests that user credentials are generated in addition to"
	    echo "host credentials.  The user credentials are stored in the ~/.globus directory as"
	    echo "the files dcache-systemtest-usercert.pem and dcache-systemtest-userkey.pem."
	    echo
	    echo "Globus applications typically uses the usercert.pem and userkey.pem files in ~/.globus"
	    echo "as the default credential.  If these default credential files do not exist or are under"
	    echo "this script's control then they are updated so they point to the newly generated"
	    echo "credential."
	    echo
	    echo "If user credentials have been generated in the past and host credentials are to be"
	    echo "regenerated then the user credentials are automatically regenerated (i.e., the"
	    echo "--user option is assumed)."
	    echo
	    echo "User credentials are generated with a name (e.g., 'Fred Bloggs') and an email"
	    echo "address (e.g., 'fred.bloggs@example.org').  These may be supplied explicitly via the"
	    echo "--name and --email options, respectively.  If either option is not specified then the"
	    echo "corresponding value is taken from the existing generated certificate, if present, or"
	    echo "the user's git configuration otherwise."
	    echo
	    echo "TRUST"
	    echo
	    echo "When testing dCache, a client must trust that the information presented"
	    echo "by the server is correct (e.g., that the server really is 'localhost')."
	    echo "This is done by the client trusting the CA that signed the certificate,"
	    echo "which is done by including the CA's certificate in a trust store."
	    echo
	    echo "The --install command will update the user's trust store (the directory"
	    echo "~/.globus/certificates) so that the CA that signed the dCache certificate"
	    echo "is trusted."
	    echo
	    echo "NB. The --install command is not needed when using the --generate command as"
	    echo "    this command will update the user's trust store automatically."
	    echo
	    echo "CLEAN"
	    echo
	    echo "The --clean command removes all the files that this script stored in the"
	    echo "~/.globus directory.  In effect, this is the reverse of running either"
	    echo "the --generate or --install commands, although reinstalling system-test is"
	    echo "needed to completely undo --generate."
	    exit 0
	    ;;

	*)
	    echo "Unknown option '$1', try --help"
	    exit 1
	    ;;
    esac
done

if [ "$only_localhost" = "1" ] && [ ! "$generate" = "1" ]; then
    echo "The --only-local flag only has effect if --generate is also specified. See"
    echo "--help for details."
    exit 1
fi

if [ "$generate" = "1" ] &&
    [ -f "$HOST_CRED_STORE/dcache-systemtest-usercert.pem" ] &&
    [ -f "$HOST_CRED_STORE/dcache-systemtest-userkey.pem" ]; then
    # Always regenerate usercert if we are generating host credential
    # and there is an existing user credential.
    user=1
fi

if [ "$user" = "1" ]; then
    if [ ! "$generate" = "1" ]; then
	echo "The --user flag only has effect if --generate is also specified. See --help"
	echo "for details."
	exit 1
    fi

    if [ "$username" = "" ] && [ -f $HOST_CRED_STORE/dcache-systemtest-usercert.pem ]; then
	username=$(openssl x509 -in $HOST_CRED_STORE/dcache-systemtest-usercert.pem -noout -text -certopt no_extensions,no_sigdump,no_issuer,no_signame,no_serial,no_version,no_header,no_pubkey,no_validity|sed 's/.*CN=//')
    fi

    if [ "$username" = "" ]; then
	username=$(git config user.name)
    fi

    if [ "$email" = "" ] && [ -f $HOST_CRED_STORE/dcache-systemtest-usercert.pem ]; then
	email=$(openssl x509 -in $HOST_CRED_STORE/dcache-systemtest-usercert.pem -noout -noout -email|head -1)
    fi

    if [ "$email" = "" ]; then
	email=$(git config user.email)
    fi
else
    if [ ! "$username" = "" ]; then
	echo "The --name option only has effect if --user is also specified. See --help"
	echo "for details."
	exit 1
    fi

    if [ ! "$email" = "" ]; then
	echo "The --email option only has effect if --user is also specified. See --help"
	echo "for details."
	exit 1
    fi
fi


if [ ! "$clean$install$generate" = "1" ]; then
    echo "Exactly one of --clean, --install and --generate must be specified.  Try --help for"
    echo "details."
    exit 1
fi

clean_dot_globus()
{
    rm -f $HOST_CRED_STORE/dcache-systemtest-host*.pem

    if [ -h $HOST_CRED_STORE/usercert.pem ] &&
	[ "$(readlink $HOST_CRED_STORE/usercert.pem)" = dcache-systemtest-usercert.pem ] &&
	[ -h $HOST_CRED_STORE/userkey.pem ] &&
	[ "$(readlink $HOST_CRED_STORE/userkey.pem)" = dcache-systemtest-userkey.pem ]; then
	rm $HOST_CRED_STORE/usercert.pem
	rm $HOST_CRED_STORE/userkey.pem
    fi

    rm -f $HOST_CRED_STORE/dcache-systemtest-user*.pem

    if [ -d $OUR_TRUST_STORE ]; then
	for file in $OUR_TRUST_STORE/*; do
	    rm -f $USER_TRUST_STORE/$(basename $file)
	done
    fi

    rm -rf $OUR_TRUST_STORE
}

if [ "$clean" = "1" ]; then
    clean_dot_globus
    exit 0
fi

list_potential_subjaltname()
{
    echo localhost
    if [ "$only_localhost" != 1 ]; then
        uname -n
        case $(uname) in
        SunOS)
            echo $(uname -n).$(awk '/^domain/ {print $2}' /etc/resolv.conf)
            ;;
        Darwin)
            hostname -f
            ;;
        Linux)
            hostname -A | sed 's/ /\n/g'
            ;;
        esac
    fi
}

cleanup_ca_dir()
{
    rm -rf $CA_DIR
}

if [ "$generate" = "1" ]; then

    if [ -f "$HOST_CRED_STORE/dcache-systemtest-usercert.pem" ] &&
	[ -f "$HOST_CRED_STORE/dcache-systemtest-userkey.pem" ]; then
	# Always regenerate usercert if we are generating host credential
	# and there is an existing user credential.
	user=1
    fi

    CA_DIR=$(mktemp -d tmp.XXXXXXXXXX)

    trap cleanup_ca_dir EXIT

    CA_CONFIG=$CA_DIR/openssl.config
    CA_KEY=$CA_DIR/ca-key.pem
    CA_CERT=$CA_DIR/ca-cert.pem
    CA_INDEX=$CA_DIR/index.txt
    CA_SERIAL=$CA_DIR/serial

    cat > $CA_CONFIG <<EOF
RANDFILE = $CA_DIR/rand
CN       = disposable-CA

##  USED WHEN GENERATING CA (SELF-SIGNED) CERTIFICATE + PRIVATE KEY

[req]
default_bits       = 2048
encrypt_key        = no
default_md         = sha256
distinguished_name = CA_distinguished_name
x509_extensions    = CA_x509_extensions
prompt             = no

[CA_distinguished_name]
1.DC = org
2.DC = dCache
CN   = \$ENV::CN

[CA_x509_extensions]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical,CA:true
subjectAltName         = email:support@dcache.org,URI:http://www.dcache.org/
nsComment              = "dCache.org disposable CA, generated $(date "+%Y-%m-%d %H:%M:%S")"
keyUsage               = critical,keyCertSign

##
##  USED WHEN PROCESSING CERTIFICATE SIGNING REQUEST:
##

[ca]
default_ca = CA_default

[CA_default]
certs            = $CA_DIR
crl_dir          = $CA_DIR
database         = $CA_INDEX
new_certs_dir    = $CA_DIR
certificate      = $CA_CERT
private_key      = $CA_KEY
serial           = $CA_SERIAL
crlnumber        = $CA_DIR/crlnumber
crl              = $CA_DIR/crl.pem
RANDFILE         = $CA_DIR/rand
name_opt         = ca_default
cert_opt         = ca_default
default_days     = 365
default_crl_days = 30
default_md       = sha256
preserve         = no
policy           = policy_any
email_in_dn      = no

[host_cert]
basicConstraints       = critical,CA:FALSE
keyUsage               = critical,digitalSignature,keyEncipherment,dataEncipherment
nsComment              = "dCache.org disposable CA generated host certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
subjectAltName         = @host_alt_names
extendedKeyUsage       = serverAuth,clientAuth
issuerAltName          = issuer:copy
certificatePolicies    = 2.5.29.32.0

[user_cert]
basicConstraints       = critical,CA:FALSE
keyUsage               = critical,digitalSignature,keyEncipherment,dataEncipherment
nsComment              = "dCache.org disposable CA generated user certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
subjectAltName         = @user_alt_names
extendedKeyUsage       = serverAuth,clientAuth
issuerAltName          = issuer:copy
certificatePolicies    = 2.5.29.32.0


[policy_any]
DC = match
DC = match
CN = supplied
EOF

    i=1
    echo "" >> $CA_CONFIG
    echo "[host_alt_names]" >> $CA_CONFIG
    for fqdn in $(list_potential_subjaltname | sort | uniq); do
	echo "DNS.$i = $fqdn" >> $CA_CONFIG
	i=$(( $i + 1 ))
    done

    if [ "$user" = "1" ]; then
	echo "" >> $CA_CONFIG
	echo "[user_alt_names]" >> $CA_CONFIG
	echo "email = $email" >> $CA_CONFIG
    fi

    touch $CA_INDEX
    echo 01 > $CA_SERIAL
    openssl req -batch -new -x509 -config $CA_CONFIG -days 365 -keyout $CA_DIR/ca-key.pem -out $CA_DIR/ca-cert.pem >/dev/null 2>&1
    CN=host/localhost openssl req -new -config $CA_CONFIG -keyout $CA_DIR/hostkey.pem -out $CA_DIR/hostcert.req  >/dev/null 2>&1
    openssl ca -batch -config $CA_CONFIG -extensions host_cert -out $CA_DIR/hostcert.pem  -infiles $CA_DIR/hostcert.req >/dev/null 2>&1


    hash_new=$(openssl x509 -in $CA_CERT -noout -subject_hash)
    cp $CA_CERT $TARGET_TRUST_STORE/$hash_new.0

    cat > $TARGET_TRUST_STORE/$hash_new.signing_policy <<EOF
access_id_CA    X509    '/DC=org/DC=dCache/CN=disposable-CA'
pos_rights      globus  CA:sign
cond_subjects   globus  '"/DC=org/DC=dCache/*"'
EOF

    files_to_trust="$hash_new.0 $hash_new.signing_policy"

    openssl_version=$(openssl version -v | awk '{print $2}')
    case $openssl_version in
        0.*)
            ;;
        1.*)
            hash_old=$(openssl x509 -in $CA_CERT -noout -subject_hash_old)
            cp $CA_CERT $TARGET_TRUST_STORE/$hash_old.0
            cp $TARGET_TRUST_STORE/$hash_new.signing_policy $TARGET_TRUST_STORE/$hash_old.signing_policy
            files_to_trust="$files_to_trust $hash_old.0 $hash_old.signing_policy"
            ;;
    esac

    mv $CA_DIR/hostcert.pem $TARGET_DIR/hostcert.pem
    openssl rsa -in $CA_DIR/hostkey.pem -out $TARGET_DIR/hostkey.pem >/dev/null 2>&1

    clean_dot_globus

    mkdir -p $HOST_CRED_STORE

    cp $TARGET_DIR/hostcert.pem $HOST_CRED_STORE/dcache-systemtest-hostcert.pem
    cp $TARGET_DIR/hostkey.pem $HOST_CRED_STORE/dcache-systemtest-hostkey.pem


    if [ "$user" = "1" ]; then
	CN=$username openssl req -new -config $CA_CONFIG -keyout $CA_DIR/userkey.pem -out $CA_DIR/usercert.req  >/dev/null 2>&1
	openssl ca -batch -config $CA_CONFIG -extensions user_cert -out $CA_DIR/usercert.pem  -infiles $CA_DIR/usercert.req >/dev/null 2>&1

	mv $CA_DIR/usercert.pem $HOST_CRED_STORE/dcache-systemtest-usercert.pem
	mv $CA_DIR/userkey.pem $HOST_CRED_STORE/dcache-systemtest-userkey.pem

	chmod 400 $HOST_CRED_STORE/dcache-systemtest-userkey.pem

	if [ ! -e $HOST_CRED_STORE/usercert.pem ] && [ ! -e $HOST_CRED_STORE/userkey.pem ]; then
	    ln -s dcache-systemtest-usercert.pem $HOST_CRED_STORE/usercert.pem
	    ln -s dcache-systemtest-userkey.pem $HOST_CRED_STORE/userkey.pem
	else
	    echo "User credential installed as:"
	    echo
	    echo "    $HOST_CRED_STORE/dcache-systemtest-usercert.pem"
	    echo "    $HOST_CRED_STORE/dcache-systemtest-userkey.pem"
	    echo
	    echo "The default credentials:"
	    echo
	    echo "    $HOST_CRED_STORE/usercert.pem"
	    echo "    $HOST_CRED_STORE/userkey.pem"
	    echo
            echo "already exist and point to some other credential.  Because of this, they have not been touched."
	    echo
	    echo "If you want to use the freshly install credentials as your default credentials then first move"
	    echo "the existing usercert.pem and userkey.pem files out of the way and then do:"
	    echo
	    echo "    ln -s dcache-systemtest-usercert.pem $HOST_CRED_STORE/usercert.pem"
	    echo "    ln -s dcache-systemtest-userkey.pem $HOST_CRED_STORE/userkey.pem"
	    echo
	fi
    fi
fi


# Add any missing trust in user's trust-store
mkdir -p $OUR_TRUST_STORE
mkdir -p $USER_TRUST_STORE

for file in $files_to_trust; do
    cp $TARGET_TRUST_STORE/$file $OUR_TRUST_STORE/$file
    rm -f $USER_TRUST_STORE/$file
    ln -s $OUR_TRUST_STORE/$file $USER_TRUST_STORE/$file
done
