#  -----------------------------------------------------------------------
#     Default values for billing
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell name of billing service
#
billing.cell.name=billing

#  ---- Whether to export the billing cell as a well known cell
#
#  This property controls whether the billing cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)billing.cell.export=true

#  ---- Disable billing to plain text file
#
#   Controls whether dCache activity is logged as plain text files.  If
#   the property is set to 'false' then activity is logged in text files.
#   If set to 'true' then there is no logging to text files.
#
(deprecated,one-of?true|false)billingDisableTxt=false
(immutable)billing.enable.text.when-disable-is-true=false
(immutable)billing.enable.text.when-disable-is-false=true
billing.enable.text=${billing.enable.text.when-disable-is-${billingDisableTxt}}

#  ---- Directory for billing logs
#
#   The directory within which the billing logs are to be written.
#
(deprecated)billingLogsDir=${dcache.paths.billing}
billing.text.dir=${billingLogsDir}

#
#  ---- whether logs are stored in flattened directory; default:
#       they are stored in year/month subdirectory
#
(one-of?true|false)billing.text.flat-dir=false

#  -----------------------------------------------------------------------
#     Format of billing entries in plain text billing files
#  -----------------------------------------------------------------------

# The billing cell receives billing messages from various components
# in dCache. Each message is logged to a plain text file using a
# configurable format.
#
# In its simplest form, the format string contains placeholders using
# the syntax $attribute$, where attribute is the name of an attribute
# in the message. The attribute names of each message is listed
# below. Messages inherited attributes from messages they extend. Beware
# that the two character sequence $$ is an escaped $ symbol in dCache
# configuration files. Thus to have two sequential $ symbols in a format
# string, four $ symbols have to be added.
#
# Each attribute has a type. Some types may expose additional fields.
# The syntax for accessing a field is $attribute.field$, where field
# is a field of the attribute. The field may itself have additional
# fields. The available fields of a number of types is listed below.
#
# Some types may have alternate renderings using a format string. The
# syntax for specifying a format string is $attribute; format="..."$,
# where ... is a type specific format string. Similarly, for
# collection types (eg arrays), the separator symbol can be specified
# as $attribute; separator="..."$, where ... is the separator.
#
# For advanced customizing, consult the StringTemplate v4
# documentation at
#
#  http://www.antlr.org/wiki/display/ST4/StringTemplate+4+Documentation
#
# or the cheat sheet at
#
#  http://www.antlr.org/wiki/display/ST4/StringTemplate+cheat+sheet
#
#
#  Message: InfoMessage
#  --------------------
#
#   Attribute   Type        Description
#   ---------   ----        -----------
#
#   date        Date        Time stamp of mesage
#   cellName    String      Name of cell submitting the message
#   cellType    String      Type of cell submitting the message
#   type        String      Request type
#   rc          Integer     Result code
#   message     String      Message (usually error message)
#   queuingTime Long        Time request was queued (milliseconds)
#   subject     Subject     Identity of user given as a collection of
#                           principals (uid, gid, FQAN, DN, Username,
#                           Kerberos, Client-IP)
#
# Message: PnfsFileInfoMessage extends InfoMessage
# ------------------------------------------------
#
#   Attribute  Type        Description
#   ---------  ----        -----------
#
#   pnfsid     PnfsId      PNFS id of file
#   path       String      File path
#   filesize   Long        File size (bytes)
#   storage    StorageInfo Storage info of file
#
# Message: MoverInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------
#
#   Attribute       Type         Description
#   ---------       ----         -----------
#
#   transferred     Long         Bytes transferred
#   connectionTime  Long         Time client was connected (milliseconds)
#   created         Boolean      True on upload, false on download
#   protocol        ProtocolInfo Protocol related information
#   initiator       String       Name of cell that initiated the transfer;
#                                if p2p, begins with "pool:"; otherwise "door:"
#   p2p             Boolean      True if transfer is pool to pool
#
# Message: DoorRequestInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   Attribute         Type       Description
#   ---------         ----       -----------
#   transactionTime   Long       Duration of operation (milliseconds)
#   uid               Integer    UID of user
#   gid               Integer    GID of user
#   owner             String     DN or user name
#   client            String     Client IP address
#
#
# Message: StorageInfoMessage extends PnfsFileInfoMessage
# -----------------------------------------------------------
#
#   Attribute         Type       Description
#   ---------         ----       -----------
#
#   transferTime      Long       Duration of operation (milliseconds)
#
#
# Message: RemoveFileInfoMessage extends InfoMessage
# --------------------------------------------------
#
#   No additional attributes.
#
#
# Type: Date
# ----------
#
#   By specifying $date; format="yyyy.MM.dd HH:mm:ss:SSS"$ the date
#   and time will be formatted respecting the given pattern
#   "yyyy.MM.dd HH:mm:ss:SSS".  Any other date pattern can be choosen
#   according to the java API SimpleDateFormat class.  The default
#   pattern is for the parameter $date$ is "MM.dd HH:mm:ss".
#
#
# Type: ProtocolInfo
# ------------------
#
#   Field          Type              Description
#   -----          ----              -----------
#
#   protocol       String            Protocol name (as used in pool manager)
#   minorVersion   Integer           Minor version of protocol
#   majorVersion   Integer           Major version of protocol
#   socketAddresss InetSocketAddress IP address and port of client
#
# Type: StorageInfo
# -----------------
#
#   Field          Type               Description
#   -----          ----               -----------
#
#   storageClass    String            The storage class of the file
#   hsm             String            HSM instance
#   locations       URI[]             Tape locations
#   stored          Boolean           True when stored on tape, false otherwise
#   map             Map<Sting,String> Additional info as key-value pairs
#
# Type: Subject
# -------------
#
#   Field          Type              Description
#   -----          ----              -----------
#
#   dn             String       Distinguished name
#   uid            Integer      User id
#   primaryGid     Integer      Primary group id
#   gids           Integer[]    Group ids
#   primaryFqan    String       First FQAN (Fully Qualified Attribute Names
#                               used by VOMS)
#   fqans          String[]     FQANs (unsorted)
#   userName       String       Mapped user name
#   loginName      String       Login name
#
# Type: PnfsId
# ------------
#
#   Field          Type         Description
#   -----          ----         -----------
#   databaseId     Integer      Database ID (first two bytes of PNFS ID)
#   domain         String
#   id             String       String form of PNFS ID
#   bytes          byte[]       Binary form of PNFS ID
#


#  ---- MoverInfoMessage
#
#    Submitted by pools for each file transfer.
#    Note:  [p2p=$p2p$] has not been added here for backward compatibility.
#           Please overwrite the default if you wish to be able to distinguish
#           pool-to-pool transfers from door-initiated uploads or downloads.
#
(deprecated)billing.format.MoverInfoMessage=$date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferred$ $connectionTime$ $created$ {$protocol$} [$initiator$] {$rc$:"$message$"}
billing.text.format.mover-info-message=${billing.format.MoverInfoMessage}

#  ---- RemoveFileInfoMessage
#
#    Submitted by PnfsManager on file removal.
#
(deprecated)billing.format.RemoveFileInfoMessage=$date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ {$rc$:"$message$"}
billing.text.format.remove-file-info-message=${billing.format.RemoveFileInfoMessage}

#  ---- DoorRequestInfoMessage
#
#    Submitted by doors for each file transfer.
#
(deprecated)billing.format.DoorRequestInfoMessage=$date$ [$cellType$:$cellName$:$type$] ["$owner$":$uid$:$gid$:$client$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transactionTime$ $queuingTime$ {$rc$:"$message$"}
billing.text.format.door-request-info-message=${billing.format.DoorRequestInfoMessage}

#  ---- StorageInfoMessage
#
#    Submitted by pools for each flush to and fetch from tape.
#
(deprecated)billing.format.StorageInfoMessage=$date$ [$cellType$:$cellName$:$type$] [$pnfsid$,$filesize$] [$path$] $if(storage)$$$$storage.storageClass$@$storage.hsm$$$$else$<Unknown>$endif$ $transferTime$ $queuingTime$ {$rc$:"$message$"}
billing.text.format.storage-info-message=${billing.format.StorageInfoMessage}

#  -----------------------------------------------------------------------
#     Store billing data in database
##  -----------------------------------------------------------------------

#   This property describes whether the billing information should be
#   written to a PostgreSQL database.  Valid values are 'no' and 'yes'.
#
#   When this property is set to 'yes' then billing will write dCache
#   billing information into a database.  The database must be created
#   manually but dCache will manage the creation and evolution of
#   tables within this database.
#
#   As an example, the following two commands instructs PostgreSQL to
#   create the database 'billing' and allow user 'srmdcache' to access
#   it:
#
#       createdb -O srmdcache -U postgres billing
#       createlang -U srmdcache plpgsql billing
#
(deprecated,one-of?yes|no)billingToDb=no
(immutable)billing.enable.db.when-toDb-is-yes=true
(immutable)billing.enable.db.when-toDb-is-no=false
(one-of?true|false|${billing.enable.db.when-toDb-is-${billingToDb}})billing.enable.db=${billing.enable.db.when-toDb-is-${billingToDb}}

# ---- Use DAO access layer to persistence
#
(obsolete)billingInfoAccess=set internally

# ---- If this is set, it overrides the jar-resident configuration resource
#      for the DAO implementation, if any
(deprecated)billingInfoAccessPropertiesFile=classpath:org/dcache/services/billing/db/datanucleus.properties
billing.db.config.path=${billingInfoAccessPropertiesFile}

# ---- Commit optimizations: in-memory caching thresholds
#
# NOTE: These are now obsolete (unused), but have not been marked as such
#
(deprecated)billingMaxInsertsBeforeCommit=10000
billing.db.inserts.max-before-commit=${billingMaxInsertsBeforeCommit}
(deprecated)billingMaxTimeBeforeCommitInSecs=5
billing.db.inserts.timeout-before-commit=${billingMaxTimeBeforeCommitInSecs}
(one-of?MILLISECONDS|SECONDS|MINUTES)billing.db.inserts.timeout-before-commit.unit=SECONDS

# ---- Data insert logic
#      controls which handler delegate to use (currently only one available)
#
(one-of?org.dcache.services.billing.db.impl.DirectQueueDelegate)billing.db.inserts.queue-delegate.type=org.dcache.services.billing.db.impl.DirectQueueDelegate

# ---- Data insert logic
#      maximum queue size (four queues, each gets this size)
#
billing.db.inserts.max-queue-size=100000

# ---- Data insert logic
#      maximum batch size (for database batched insert; recommended not to be
#      greater than 2000)
#
billing.db.inserts.max-batch-size=1000

# ---- Data insert logic
#      drop messages when the queue maximum is reached
#
(one-of?true|false)billing.db.inserts.drop-messages-at-limit=true

# ---- liquibase changelog
(obsolete)billingChangelog=

# ---- liquibase update
(deprecated)updateBillingDb=${dcache.db.schema.auto}
(one-of?true|false|${updateBillingDb})billing.db.schema.auto=${updateBillingDb}

# ---- RDBMS/JDBC URL
#
(deprecated)billingDbUrl=jdbc:postgresql://${billing.db.host}/${billing.db.name}
billing.db.url=${billingDbUrl}

# ---- RDBMS/JDBC Database host name
#
(deprecated)billingDbHost=localhost
billing.db.host=${billingDbHost}

# ---- RDBMS/JDBC Database user name
#
(deprecated)billingDbUser=srmdcache
billing.db.user=${billingDbUser}

# ---- RDBMS/JDBC Database user password
#
(deprecated)billingDbPass=srmdcache
billing.db.password=${billingDbPass}

#  The following enables using pgfile, which is disabled by default
#  billingDbPgPassFileName=/root/.pgpass
#
(deprecated)billingDbPgPassFileName=
billing.db.password.file=${billingDbPgPassFileName}

# ---- Database name
#
(deprecated)billingDbName=billing
(immutable)billing.db.name-when-true=${billingDbName}
(immutable)billing.db.name-when-false=
billing.db.name=${billing.db.name-when-${billing.enable.db}}

#  ---- Configuration for database connection pool
#
#  The database connection pool reuses connections between successive
#  database operations.  By reusing connections dCache doesn't suffer
#  the overhead of establishing new database connections for each
#  operation.
#
#  The options here determine how billing behaves as the number of
#  concurrent requests fluctuates.
#

#
#  The maximum number of concurrent database connections.
#
billing.db.connections.max=30

#
#  The minimum number of idle database connections.
#
billing.db.connections.idle=3

#
#  To enable conditional presence of database for the dcache database commands
#

(immutable)billing.db.schema.changelog-when-true=org/dcache/services/billing/db/sql/billing.changelog-master.xml
(immutable)billing.db.schema.changelog-when-false=

#
# Note: when db is not enabled, the name needs to be empty, or else
#       the dcache database command will attempt to connect
#       Hence this cannot be equal to billing.db.name in this case.
#
billing.db.schema.changelog=${billing.db.schema.changelog-when-${billing.enable.db}}

# ---- communcation timeout
(deprecated)poolConnectTimeout=3600000
billing.service.poolmanager.timeout=${poolConnectTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)billing.service.poolmanager.timeout.unit=MILLISECONDS
billing.service.poolmanager=${dcache.service.poolmanager}

#
#  The following properties are Obsolete or Forbidden.
#
(forbidden)billingDb=use billing.text.dir instead
(obsolete)billingDbCommitRows=use billing.db.inserts.max-before-commit instead
(obsolete)billingDbCommitIntervalInMilliseconds=use billing.db.inserts.timeout-before-commit instead
(obsolete)billingPlotPropertiesFile=no longer supported
(forbidden)poolManager=Use poolmanager instead
(obsolete)billingDbDriver = The property is not needed with JDBC 4 drivers
(obsolete)billing.db.driver = The property is not needed with JDBC 4 drivers
(forbidden)billing.db.connections.max-per-partition = Consider using billing.db.connections.max instead
(forbidden)billing.db.connections.min-per-partition = Consider using billing.db.connections.idle instead
