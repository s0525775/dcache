#  -----------------------------------------------------------------------
#     dCache default values
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  -----------------------------------------------------------------------
#     Parameters related to CDMI startup
#  -----------------------------------------------------------------------
cdmi.cell.name=CDMI-${host.name}

#  ---- Whether to export the cdmi cell as a well known cell
#
#  This property controls whether the cdmi cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)cdmi.cell.export=true

#  The port CDMI will listen on.
cdmi.net.port=8542
#
#  The ssl port CDMI will listen on.
cdmi.net.ssl.port=8543

#  The ssl jglobus port CDMI will listen on.
cdmi.net.ssl-jg.port=8544

#  The interface cdmi will listen on.
cdmi.net.listen=${dcache.net.listen}

# ---- Host name of cdmi service
#
# For certain operations cdmi needs to know its domain name.  The
# property "cdmiHost" can be used to override the default value.  If
# this value is not set, the value is detected automatically and it is
# equivalent to the output of the unix hostname program.
#
cdmi.net.host=${host.fqdn}

# ---- Root directory where the data is stored
#
# This is the place where all data is stored. The root directory here
# need the proper permissions so that authenticated users can store their
# directories and files (containers and dataobjects) here.
#
cdmi.basedirectory.data=/public

# ---- Root directory where the capabilities of the Cloud interface are stored
#
# This is the place where all capabilities are stored. The root directory here
# does not need special permissions since this directory is accessed by the.
# Root user directly. Capabilities must be accessible for everyone.
#
cdmi.basedirectory.capabilites=/

# Whether space reservations are supported
(one-of?true|false|${dcache.enable.space-reservation})cdmi.enable.space-reservation=${dcache.enable.space-reservation}

# Cell address of pnfsmanager service
cdmi.service.pnfsmanager=${dcache.service.pnfsmanager}

# Cell address for poolmanager service
cdmi.service.poolmanager=${cdmi.service.poolmanager-space-${cdmi.enable.space-reservation}}
(immutable)cdmi.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)cdmi.service.poolmanager-space-true=${dcache.service.spacemanager}

# Timeout for poolmanager requests
cdmi.service.poolmanager.timeout=300000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.service.poolmanager.timeout.unit=MILLISECONDS

# Timeout for pool requests
cdmi.service.pool.timeout=10000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.service.pool.timeout.unit=MILLISECONDS

#  ---- Level of access granted to anonymous users through CDMI
#
#   Specifies which HTTP methods are granted to anonymous
#   clients. NONE specifies that all anonymous requests will be
#   rejected; READONLY specifies that only read requests are allowed
#   (that is, GET, HEAD, OPTIONS and PROPFIND); FULL specifies that
#   all HTTP methods are allowed.
#
#   Anonymous clients are still subject to authorisation: Only
#   operations with world access are granted.
#
(one-of?NONE|READONLY|FULL)cdmi.authz.anonymous-operations=NONE

#  ---- Whether anonymous listing is allowed
#
#   When false, unauthenticated users are prevented from listing the
#   contents of directories.  When true then unauthenticated users
#   may list the contents of any world-readable directory.
#
(one-of?true|false)cdmi.authz.anonymous-listing=true

#  ---- Whether to use HTTP or HTTPS for CDMI
#
#   Specifies whether the HTTP or the HTTPS protocol is used. For
#   HTTPS, a server certificate and a trust store need to be
#   created.
#
#   Alternatively to https, the https-jglobus option provides HTTPS
#   support through the JGlobus library. JGlobus accesses the host and
#   CA certificates in /etc/grid-security/ directly. In contrast to
#   the plain Java SSL implementation JGlobus accepts proxy
#   certificates, including VOMS proxy certificates. The protocol
#   between the client and the server is however the same for https
#   and https-jglobus.
#
(one-of?http|https|https-jglobus)cdmi.authn.protocol=http
(one-of?http|https|https-jglobus)cdmi.authn.ssl.protocol=https

#  ---- Upload directory
#
#   The cdmi door restricts access to the user's root directory (as defined
#   by gPlazma). The upload directory is an exception to this rule. The directory
#   is typically used by SRM for uploading files.
#
cdmi.authz.upload-directory=${dcache.upload-directory}

#  ---- Paths which are accessible through CDMI
#
#   This parameter is set to the absolute paths to directories
#   accessible through CDMI. Multiple directories are separated by a
#   colon.
#
cdmi.authz.allowed-paths=/

#  ---- Whether to redirect GET requests to a pool
#
#   If true, CDMI doors will respond with a 302 redirect pointing to
#   a pool holding the file. This requires that a pool can accept
#   incoming TCP connections and that the client follows the
#   redirect. If false, data is relayed through the door. The door
#   will establish a TCP connection to the pool.
#
(one-of?true|false)cdmi.redirect.on-read=true

#  ---- Whether to redirect PUT requests to a pool
#
#   If true, CDMI doors will respond with a 307 redirect pointing to
#   a pool to which to upload the file. This requires that a pool can
#   accept incoming TCP connections and that the client follows the
#   redirect. If false, data is relayed through the door. The door
#   will establish a TCP connection to the pool. Only clients that send
#   a Expect: 100-Continue header will be redirected - other requests
#   will always be proxied through the door.
#
(one-of?true|false)cdmi.redirect.on-write=true

#  ---- Whether the CDMI door is read only
#
#   When set to true, only read operations are allowed through CDMI.
#
(one-of?true|false)cdmi.authz.readonly=false

# Cell address of gplazma service
cdmi.service.gplazma=${dcache.service.gplazma}

# Timeout for gplazma requests
cdmi.service.gplazma.timeout=180000
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)cdmi.service.gplazma.timeout.unit=MILLISECONDS

# Cell address of http loginbroker to register with
cdmi.service.loginbroker=${dcache.service.loginbroker}

# Information for http loginbroker registration
cdmi.service.loginbroker.port=$(cdmi.net.port)
cdmi.service.loginbroker.update-period=${dcache.service.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.service.loginbroker.update-period.unit})\
  cdmi.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}
cdmi.service.loginbroker.update-threshold=${dcache.service.loginbroker.update-threshold}
cdmi.service.loginbroker.version=1.1
cdmi.service.loginbroker.family=${cdmi.service.loginbroker.family-${cdmi.authn.protocol}}
(immutable)cdmi.service.loginbroker.family-http=http
(immutable)cdmi.service.loginbroker.family-https=https
(immutable)cdmi.service.loginbroker.family-https-jglobus=https

#  ---- Whether HTTP Basic authentication is enabled
#
#   When enabled a user name and password will be requested on
#   authorization failures.
#
#   Note that HTTP Basic authentication essentially transfers
#   passwords in clear text. A secure setup should only use HTTP Basic
#   authentication over HTTPS. << Should be false!!!
#
(one-of?true|false)cdmi.authn.basic=true

# Host certificate for https-jglobus authentication
cdmi.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Host key for https-jglobus authentication
cdmi.authn.hostcert.key=${dcache.authn.hostcert.key}

# How often to check the host certificate for updates
cdmi.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.hostcert.refresh.unit})cdmi.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}

# Path to directory with trusted CA certificates for https-jglobus authentication
cdmi.authn.capath=${dcache.authn.capath}

# How often to check the CA certificates for updates
cdmi.authn.capath.refresh=${dcache.authn.capath.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.capath.refresh.unit})cdmi.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}

#  ---- Server certificate
#
#   This parameter specifies the path to the file containing the
#   PKCS12 encoded server certificate. When using https as the
#   webdav.authn.protocol, the host certificate in /etc/grid-security/ needs
#   to be converted to PKCS12 format before it can be used with the
#   CDMI door. Use the 'bin/dcache import hostcert' command to
#   perform this task.
#
#cdmi.authn.keystore=${dcache.authn.keystore}
cdmi.authn.keystore=/certs/server/cert.p12

#  ---- Password for server certificate
#
#   This parameter specifies the password with which the PKCS12 encoded
#   server certificate is encrypted.
#
#cdmi.authn.keystore.password=${dcache.authn.keystore.password}
cdmi.authn.keystore.password=test123

#  ---- Trusted CA certificates
#
#   This parameter specifies the path to a Java Keystore containing
#   the the trusted CA certicates used by the CDMI door. When using
#   https as the webdav.authn.protocol, the CA certificates in
#   /etc/grid-security/certificates/ need to be converted into a Java
#   Keystore file before they can be used with the CDMI door. Use
#   the 'bin/dcache import cacerts' command to perform this task.
#
#cdmi.authn.truststore=${dcache.authn.truststore}
cdmi.authn.truststore=/certs/server/truststore.jks

#  ---- Password for trusted CA certificates
#
#   This parameter specifies the password with which the Java Keystore
#   containing the trusted CA certificates is encrypted.
#
#cdmi.authn.truststore.password=${dcache.authn.truststore.password}
cdmi.authn.truststore.password=test123

#  ---- Whether client certificates are accepted for HTTPS
#
#   This parameter specifies whether the CDMI door will accept a client
#   certificate for authentication.
#
(one-of?true|false)cdmi.authn.accept-client-cert=true

#  ---- Whether client certificates are required for HTTPS
#
#   This parameter specifies whether the CDMI door will require a
#   client certificate for authentication.
#
#(one-of?true|false)cdmi.authn.require-client-cert=false
(one-of?true|false)cdmi.authn.require-client-cert=false

#  Flags to disable problematic crypto ciphers
#
#  See dcache.authn.ciphers for details.
cdmi.authn.ciphers=${dcache.authn.ciphers}
