# -----------------------------------------------------------------------
#    Default values for srm
# -----------------------------------------------------------------------
@DEFAULTS_HEADER@

# ---- Cell names
#
srm.cell.name=SRM-${host.name}

#  ---- Whether to export the srm as a well known cell
#
#  This property controls whether the srm cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)srm.cell.export=true

# Cell message processing limits
srm.cell.limits.message.threads.min=1
srm.cell.limits.message.threads.max=100
srm.cell.limits.message.threads.max-idle-time=60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)srm.cell.limits.message.threads.max-idle-time.unit=SECONDS
srm.cell.limits.message.queue.max=1

#  ---- TCP Port
#
#  The port SRM will listen on for GSI-based communication.  GSI is an
#  encrypted transport commonly used in grid communication.  It is
#  similar to SSL but incompatible.
#
(deprecated)srmPort=8443
srm.net.port=${srmPort}
#
#  The port SRM will listen on for SSL-based communication.  SSL is an
#  industry standard encryption transport.
#
(deprecated)srm.ssl.port=8445
srm.net.ssl-port=${srm.ssl.port}

#  The interface SRM will listen on.
srm.net.listen=${dcache.net.listen}


# ---- Host name of srm service
#
# For certain operations srm needs to know its domain name.  The
# property "srmHost" can be used to override the default value.  If
# this value is not set, the value is detected automatically and it is
# equivalent to the output of the unix hostname program.
#
(deprecated)srmHost=${host.fqdn}
srm.net.host=${srmHost}


# ---- Host names of srm services in this deployment
#
# A host part of the source url (surl) is used to determine if the
# surl references file in this storage system.  In case of the copy
# operation, srm needs to be able to dinstinguish between the local
# surl and the remote one.  Also srm needs to refuse to perform
# operations on non local srm urls. localSrmHosts is a comma separated
# list of hosts that will be considered local by this srm service.
# This parameter might need to be defined as a list because in case of
# the multihomed or distributed server it may have more than one
# network name.  If localSrmHosts is not specified, srmHost will be
# used
#
(deprecated)localSrmHosts=${srm.net.host}
srm.net.local-hosts=${localSrmHosts}


# ---- Client side transport layer encryption
#
# The security transport to use when contacting remote SRM instances.  GSI
# (Grid Security Infrastructure) is the commonly deployed protocol, but SSL
# is the industrial standard.  This property is only used for third-party
# copies (srmCopy).
#
(deprecated,one-of?SSL|GSI)srmClientTransport=GSI
(one-of?SSL|GSI|${srmClientTransport})srm.client-transport=${srmClientTransport}


# ---- Database host name
#
(deprecated)srmDatabaseHost=localhost
srm.db.host=${srmDatabaseHost}

# ---- Database name
(deprecated)srmDbName=dcache
srm.db.name=${srmDbName}


# ---- Database user name
(deprecated)srmDbUser=srmdcache
srm.db.user=${srmDbUser}

# ---- Database password
(deprecated)srmDbPassword=srmdcache
srm.db.password=${srmDbPassword}

# ---- Database password file
(deprecated)srmPasswordFile=
srm.db.password.file=${srmPasswordFile}

# ---- Database JDBC URL
srm.db.url=jdbc:postgresql://${srm.db.host}/${srm.db.name}

#
# The maximum number of concurrent database connections.
#
srm.db.connections.max = 50

#
# The minimum number of idle database connections.
#
srm.db.connections.idle = 1

# ---- SRM automatically manages it's database schema
(immutable)srm.db.schema.auto=true

# ---- TCP streams to use for GridFTP transfer
#
#   The number of concurrent TCP streams used by srmCopy controlled
#   GridFTP transfers.
#
(deprecated)parallelStreams=10
srm.limits.parallel-streams=${parallelStreams}

# ---- Timeout of the external srmCopy script
#
#   Timeout in seconds, how long to wait for the completion of the
#   transfer via external client, should the external client be used
#   for the MSS to MSS transfers.
#
(deprecated)srmTimeout=3600
srm.limits.external-copy-script.timeout=${srmTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.external-copy-script.timeout.unit=SECONDS


# ---- Buffer size used for srmCopy transfer
#
#   Specified in bytes.
#
(deprecated)srmBufferSize=1048576
srm.limits.transfer-buffer.size=${srmBufferSize}

# ---- TCP buffer size used for srmCopy transfer
#
#   Specified in bytes.
#
(deprecated)srmTcpBufferSize=1048576
srm.limits.transfer-tcp-buffer.size=${srmTcpBufferSize}

# ---- Controls debug functionality of the external srmCopy script
#
(deprecated,one-of?true|false)srmDebug=true
(one-of?true|fale|${srmDebug})srm.enable.external-copy-script.debug=${srmDebug}

# ---- Threads that accept TCP connections
(deprecated)srmJettyConnectorAcceptors=1
srm.limits.jetty-connector.acceptors=${srmJettyConnectorAcceptors}

# ---- Milliseconds before an idle TCP connection is closed
(deprecated)srmJettyConnectorMaxIdleTime=60000
srm.limits.jetty-connector.idle-time.max=${srmJettyConnectorMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.jetty-connector.idle-time.max.unit=MILLISECONDS

# --- Handshake timeout
srm.limits.jetty-connector.handshake.timeout=10000
(one-of?MILLISECONDS|SECONDS|MINUTES)\
srm.limits.jetty-connector.handshake.timeout.unit=MILLISECONDS

# ---- Milliseconds before an idle TCP connection is closed during high load
(deprecated)srmJettyConnectorLowResourceMaxIdleTime=20000
srm.limits.jetty-connector.low-resource.max.idle-time=${srmJettyConnectorLowResourceMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.jetty-connector.low-resource.max.idle-time.unit=MILLISECONDS

# ---- TCP backlog for SRM connections
(deprecated)srmJettyConnectorBackLog=1024
srm.limits.jetty-connector.backlog=${srmJettyConnectorBackLog}

# ---- Maximum number of threads used for SRM request processing
#
# Whenever a client submits an SRM request a thread is allocated. This
# setting controls the maximum number of such threads.
#
# Notice that this does not control the number of SRM transfers that
# can be active at any given time: An SRM transfer involves several
# requests by the client (eg srmPrepareToGet, srmStatusOfGetRequest,
# srmReleaseFiles).
#
# There is also a choice whether to process requests synchronously or
# asynchronously. If processed synchronously, the request is not answered
# until processed. This means that a thread is bound to the request for
# the duration of the request processing. If processed asynchronous,
# the thread is released right away and the client submits new requests
# to poll for the completion of the previously submitted request. This
# adds latency and increases authentication overhead, but frees thread
# and TCP connections. See srm.request.switch-to-async-mode-delay.
#
(deprecated)srmJettyThreadsMax=500
srm.limits.jetty.threads.max=${srmJettyThreadsMax}

# ---- Minimum number of threads used for SRM request processing
(deprecated)srmJettyThreadsMin=10
srm.limits.jetty.threads.min=${srmJettyThreadsMin}


# ---- Milliseconds before an idle requst processing thread is terminated
(deprecated)srmJettyThreadsMaxIdleTime=30000
srm.limits.jetty.threads.idle-time.max=${srmJettyThreadsMaxIdleTime}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.limits.jetty.threads.idle-time.max.unit=MILLISECONDS

# ---- Maximum number of queued SRM requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
(deprecated)srmJettyThreadsMaxQueued=500
srm.limits.jetty.threads.queued.max=${srmJettyThreadsMaxQueued}


# ---- Parameters for schedulable SRM requests
#
# The SRM specification allows some request types to be processed
# asynchronously. Rather than waiting for request processing to
# complete before getting a reply, the client receives a preliminary
# reply stating that the request is accepted with instructions to
# ask back for the result later. The SRM specification allows this
# mode of operation for the following requests:
#
#  o srmReserveSpace
#  o srmUpdateSpace
#  o srmChangeSpaceForFiles
#  o srmLs
#  o srmPrepareToGet
#  o srmPrepareToPut
#  o srmCopy
#  o srmBringOnline
#
# Except for srmUpdateSpace and srmChangeSpaceForFiles, dCache supports
# asynchronous processing for all these requests.
#
# These requests share a common lifecycle:
#
#  o SRM_REQUEST_QUEUED
#
#    The request is queued for processing. dCache is currently not processing
#    the request.
#
#  o SRM_REQUEST_INPROGRESS
#
#    dCache is processing the request.
#
#  o SRM_FILE_PINNED / SRM_SPACE_AVAILABLE
#
#    For srmPrepareToGet and srmPrepareToPut these states indicate
#    that a transfer URL has been prepared and the client is expected
#    to transfer the file.
#
#  o SRM_SUCCESS / SRM_FAILURE / SRM_RELEASED / SRM_ABORTED
#
#    Request has completed and is no longer active
#
# This lifecycle is controlled by the SRM request scheduler. A separate
# scheduler exists for each request type, allowing limits to be configured
# individually.
#
# The SRM specification supports bulk operations for the following requests:
#
#  o srmLs
#  o srmPrepareToGet
#  o srmPrepareToPut
#  o srmCopy
#  o srmBringOnline
#  o srmRm
#
# A single client request may apply to a large number of files. Internally,
# dCache treats each file in a schedulable bulk request individually. To be
# precise, the scheduling described above does not apply to the entire SRM
# request, but to each site URL in the request. This is also true for the
# configuration properties described below.
#
# srmRm isn't a schedulable request and thus the discussion above doesn't
# apply to it.


# ---- Number of threads executing schedulable SRM requests
#
# Thread pool size for processing schedulable SRM requests. Most processing
# is done asynchronously and a low number of threads suffices to serve even
# thousands of concurrent requests. The notable exception are srmCopy and srmLs
# requests; these should be served by a thread pool equal to the number of
# inprogress requests allowed.
#
# This setting should not be confused with srm.limits.jetty.threads.min and
# srm.limits.jetty.threads.max. Those settings control the number of threads
# used by the embedded webserver; those threads are used for all client requests,
# schedulable and unschedulable requests alike, even status queries. Schedulable
# requests are however quickly handed over to the request scheduler and the
# web server thread is released (see srm.request.switch-to-async-mode-delay).
# Another difference is that for bulk requests, the webserver thread is bound
# to the entire request, while the scheduler threads process individual SURLs.
#
srm.request.threads=${srmGetReqThreadPoolSize}

(deprecated)srmGetReqThreadPoolSize=250
srm.request.get.threads=${srm.request.threads}

(deprecated)srmBringOnlineReqThreadPoolSize=${srm.request.threads}
srm.request.bring-online.threads=${srmBringOnlineReqThreadPoolSize}

(deprecated)srmPutReqThreadPoolSize=${srm.request.threads}
srm.request.put.threads=${srmPutReqThreadPoolSize}

(deprecated)srmCopyReqThreadPoolSize=${srm.request.copy.max-inprogress}
srm.request.copy.threads=${srmCopyReqThreadPoolSize}

(deprecated)srmLsRequestThreadPoolSize=${srm.request.threads}
srm.request.ls.threads=${srm.request.ls.max-inprogress}

(deprecated)srmReserveReqThreadPoolSize=${srm.request.threads}
srm.request.reserve-space.threads=${srmReserveReqThreadPoolSize}

# ---- Maximum number of requests allowed
#
# This is the maximum number requests allowed of any given
# request type. Once the limit is reached, new requests will fail
# immediately rather than being queued.
#
# Any request that is not finished counts towards this limit. That is, all
# requests in one of the following states: SRM_REQUEST_QUEUED,
# SRM_REQUEST_INPROGRESS, SRM_FILE_PINNED and SRM_SPACE_AVAILABLE.
#
srm.request.max-requests = 10000
srm.request.get.max-requests = ${srm.request.max-requests}
srm.request.bring-online.max-requests = ${srm.request.max-requests}
srm.request.put.max-requests = ${srm.request.max-requests}
srm.request.copy.max-requests = ${srm.request.max-requests}
srm.request.ls.max-requests = ${srm.request.max-requests}
srm.request.reserve-space.max-requests = ${srm.request.max-requests}


# ---- Maximum number of requests in progress
#
# Maximum number of requests to process concurrently of any given request type.
# This limits the number of SRM_REQUEST_INPROGRESS requests. Once the limit is
# reached, new requests will queue. Requests for which a TURL was already
# computed do not count towards this limit even if their state may be reported
# as SRM_REQUEST_INPROGRESS.
#
# The setting is a good measure of how much load the SRM can induce directly
# on other services in dCache, such as pnfs manager and pin manager.
#
# Notably, this setting limits the number of files that can be brought online
# simultaneously for get and bring-online requests, and the number of concurrent
# srmCopy transfers.
#
# The setting does NOT limit the number of concurrent upload and downloads. In
# SRM, srmPrepareToPut and srmPrepareToGet do not actually transfer a file: They
# prepare a transfer URL so that the client can transfer a file. Once the transfer
# URL has been prepared, the requests are no longer considered in progress (see
# srm.request.max-transfers).
#
srm.request.get.max-inprogress = 1000
srm.request.bring-online.max-inprogress = 10000
srm.request.copy.max-inprogress = 1000
srm.request.put.max-inprogress = 50
srm.request.ls.max-inprogress = 50
srm.request.reserve-space.max-inprogress = 10

# ---- Number of simultaneous transfer URLs
#
# This limits the number of TURLs to hand out to clients. If this limit is reached,
# additional requests will be queued after having been prepared.
#
# Note that clients may not actually transfer the file right after receiving a
# TURL. Many advanced clients check out TURLs ahead of time and queue transfers
# to and from those TURLs. Thus the actual number of transfers observed on dCache
# doors may be lower than the number TURLs handed out to the client.
#
# Note that this setting does not apply to srmCopy requests. Such requests do
# not have a TURL as the transfer is done by dCache and not by the client. To
# control the number of concurrent copies use srm.request.copy.max-inprogress or
# the settings of the transfermanagers service.
#
(deprecated)srm.request.max-ready-requests=${srmGetReqMaxReadyRequests}
srm.request.max-transfers=${srm.request.max-ready-requests}

(deprecated)srmGetReqMaxReadyRequests=2000
(deprecated)srm.request.get.max-ready-requests=${srm.request.max-transfers}
srm.request.get.max-transfers=${srm.request.get.max-ready-requests}

(deprecated)srmPutReqMaxReadyRequests=${srm.request.max-transfers}
(deprecated)srm.request.put.max-ready-requests=${srmPutReqMaxReadyRequests}
srm.request.put.max-transfers=${srm.request.put.max-ready-requests}


# --- Number of retries allowed for retriable request processing errors
#
# Schedulable requests may be retried when they experience transient
# internal errors. This setting controls the number of retries before
# giving up.
#
# When a request is retried, it is reset to the SRM_REQUEST_QUEUED state
# and is subject to queueing and scheduling as if it was a new request.
#
srm.request.retries=${srmGetReqMaxNumberOfRetries}

(deprecated)srmGetReqMaxNumberOfRetries=10
srm.request.get.retries=${srm.request.retries}

(deprecated)srmBringOnlineReqMaxNumberOfRetries=${srm.request.retries}
srm.request.bring-online.retries=${srmBringOnlineReqMaxNumberOfRetries}

(deprecated)srmPutReqMaxNumberOfRetries=${srm.request.retries}
srm.request.put.retries=${srmPutReqMaxNumberOfRetries}

(deprecated)srmCopyReqMaxNumberOfRetries=${srm.request.retries}
srm.request.copy.retries=${srmCopyReqMaxNumberOfRetries}

(deprecated)srmLsRequestMaxNumberOfRetries=${srm.request.retries}
srm.request.ls.retries=${srmLsRequestMaxNumberOfRetries}

(deprecated)srmReserveReqMaxNumberOfRetries=${srm.request.retries}
srm.request.reserve-space.retries=${srmReserveReqMaxNumberOfRetries}


# --- Grace period before retrying requests
#
# A request may sleep for a while before being retried. This setting
# controls how long the request should sleep.
#
srm.request.retry-timeout=${srmGetReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.request.retry-timeout.unit=MILLISECONDS

(deprecated)srmGetReqRetryTimeout=60000
srm.request.get.retry-timeout=${srm.request.retry-timeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
srm.request.get.retry-timeout.unit=${srm.request.retry-timeout.unit}

(deprecated)srmBringOnlineReqRetryTimeout=${srm.request.retry-timeout}
srm.request.bring-online.retry-timeout=${srmBringOnlineReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
srm.request.bring-online.retry-timeout.unit=${srm.request.retry-timeout.unit}

(deprecated)srmPutReqRetryTimeout=${srm.request.retry-timeout}
srm.request.put.retry-timeout=${srmPutReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
srm.request.put.retry-timeout.unit=${srm.request.retry-timeout.unit}

(deprecated)srmCopyReqRetryTimeout=${srm.request.retry-timeout}
srm.request.copy.retry-timeout=${srmCopyReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
srm.request.copy.retry-timeout.unit=${srm.request.retry-timeout.unit}

(deprecated)srmLsRequestRetryTimeout=${srm.request.retry-timeout}
srm.request.ls.retry-timeout=${srmLsRequestRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
srm.request.ls.retry-timeout.unit=${srm.request.retry-timeout.unit}

(deprecated)srmReserveReqRetryTimeout=${srm.request.retry-timeout}
srm.request.reserve-space.retry-timeout=${srmReserveReqRetryTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${srm.request.retry-timeout.unit})\
srm.request.reserve-space.retry-timeout.unit=${srm.request.retry-timeout.unit}

# --- Soft limit on number of concurrent requests by the same owner
#
#  Once this number of requests of a give type by a given owner in any of the
#  SRM_REQUEST_INPROGRESS, SRM_FILE_PINNED, SRM_SPACE_AVAILABLE states
#  has been reached, subsequent requests are given a lower priority compared to
#  requests by other users.
#
srm.request.max-by-same-user=${srmGetReqMaxNumOfRunningBySameOwner}

(deprecated)srmGetReqMaxNumOfRunningBySameOwner=100
srm.request.get.max-by-same-user=${srm.request.max-by-same-user}

(deprecated)srmBringOnlineReqMaxNumOfRunningBySameOwner=${srm.request.max-by-same-user}
srm.request.bring-online.max-by-same-user=${srmBringOnlineReqMaxNumOfRunningBySameOwner}

(deprecated)srmPutReqMaxNumOfRunningBySameOwner=${srm.request.max-by-same-user}
srm.request.put.max-by-same-user=${srmPutReqMaxNumOfRunningBySameOwner}

(deprecated)srmCopyReqMaxNumOfRunningBySameOwner=${srm.request.max-by-same-user}
srm.request.copy.max-by-same-user=${srmCopyReqMaxNumOfRunningBySameOwner}

(deprecated)srmLsRequestMaxNumberOfRunningBySameOwner=${srm.request.max-by-same-user}
srm.request.ls.max-by-same-user=${srmLsRequestMaxNumberOfRunningBySameOwner}

(deprecated)srmReserveReqMaxNumOfRunningBySameOwner=${srm.request.max-by-same-user}
srm.request.reserve-space.max-by-same-user=${srmReserveReqMaxNumOfRunningBySameOwner}

# ---- Delay until requests are processed asynchronously
#
# Schedulable SRM requests may be processed synchronously or asynchronously, at
# the server's discretion.  dCache can start to process such requests synchronously
# and, if this is taking too long, reply asynchronously and continue to work on the
# operation background. While in synchronous mode, a webserver thread is blocked
# waiting for the result (see srm.limits.jetty.threads.min and
# srm.limits.jetty.threads.max).
#
# This setting specifies the time after which requests are handled asynchronously.
# Set to 'infinity' to disable asynchronous processing.
#
# Asynchronous processing avoids holding TCP connections to the server while
# the request is processed, but at the expense of the client periodically polling
# the status, thus increasing the perceived request processing time.
#
srm.request.switch-to-async-mode-delay=${srmGetReqSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|SECONDS|MINUTES)\
srm.request.switch-to-async-mode-delay.unit=MILLISECONDS

(deprecated)srmGetReqSwitchToAsynchronousModeDelay=1000
srm.request.get.switch-to-async-mode-delay=${srm.request.switch-to-async-mode-delay}
(one-of?MILLISECONDS|SECONDS|MINUTES|${srm.request.switch-to-async-mode-delay.unit})\
srm.request.get.switch-to-async-mode-delay.unit=${srm.request.switch-to-async-mode-delay.unit}

(deprecated)srmBringOnlineReqSwitchToAsynchronousModeDelay=${srm.request.switch-to-async-mode-delay}
srm.request.bring-online.switch-to-async-mode-delay=${srmBringOnlineReqSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|\
	SECONDS|MINUTES|\
	HOURS|DAYS|\
	${srm.request.switch-to-async-mode-delay.unit})\
srm.request.bring-online.switch-to-async-mode-delay.unit=${srm.request.switch-to-async-mode-delay.unit}

(deprecated)srmPutReqSwitchToAsynchronousModeDelay=${srm.request.switch-to-async-mode-delay}
srm.request.put.switch-to-async-mode-delay=${srmPutReqSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.request.switch-to-async-mode-delay.unit})\
srm.request.put.switch-to-async-mode-delay.unit=${srm.request.switch-to-async-mode-delay.unit}

(deprecated)srmLsRequestSwitchToAsynchronousModeDelay=${srm.request.switch-to-async-mode-delay}
srm.request.ls.switch-to-async-mode-delay=${srmLsRequestSwitchToAsynchronousModeDelay}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.request.switch-to-async-mode-delay.unit})\
srm.request.ls.switch-to-async-mode-delay.unit=${srm.request.switch-to-async-mode-delay.unit}


# ---- Enable storing requests in database
#
(deprecated,one-of?true|false)srmDatabaseEnabled=true
(one-of?true|false|${srmDatabaseEnabled})srm.persistence.enable=${srmDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable})\
srmGetDatabaseEnabled=${srm.persistence.enable}
(one-of?true|false|${srmGetDatabaseEnabled})\
srm.persistence.get.enable=${srmGetDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable})\
srmBringOnlineDatabaseEnabled=${srm.persistence.enable}
(one-of?true|false|${srmBringOnlineDatabaseEnabled})\
srm.persistence.bring-online.enable=${srmBringOnlineDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable})\
srmPutDatabaseEnabled=${srm.persistence.enable}
(one-of?true|false|${srmPutDatabaseEnabled})\
srm.persistence.put.enable=${srmPutDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable})\
srmCopyDatabaseEnabled=${srm.persistence.enable}
(one-of?true|false|${srmCopyDatabaseEnabled})\
srm.persistence.copy.enable=${srmCopyDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable})\
srmLsDatabaseEnabled=${srm.persistence.enable}
(one-of?true|false|${srmLsDatabaseEnabled})\
srm.persistence.ls.enable=${srmLsDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable})\
srmReserveDatabaseEnabled=${srm.persistence.enable}
(one-of?true|false|${srmReserveDatabaseEnabled})\
srm.persistence.reserve-space.enable=${srmReserveDatabaseEnabled}


# ---- Enable cleaning of pending requests during restart
#
# If enabled and the srm is restarted and there are pending requests
# their state will change to Failed or Done.
#
(deprecated,one-of?true|false)srmCleanPendingRequestsOnRestart=false
(one-of?true|false|${srmCleanPendingRequestsOnRestart})\
srm.persistence.enable.clean-pending-on-restart=${srmCleanPendingRequestsOnRestart}

(deprecated,one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
srmGetCleanPendingRequestsOnRestart=${srm.persistence.enable.clean-pending-on-restart}
(one-of?true|false|${srmGetCleanPendingRequestsOnRestart})\
srm.persistence.get.enable.clean-pending-on-restart=${srmGetCleanPendingRequestsOnRestart}

(deprecated,one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
srmBringOnlineCleanPendingRequestsOnRestart=${srm.persistence.enable.clean-pending-on-restart}
(one-of?true|false|${srmBringOnlineCleanPendingRequestsOnRestart})\
srm.persistence.bring-online.enable.clean-pending-on-restart=${srmBringOnlineCleanPendingRequestsOnRestart}

(deprecated,one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
srmPutCleanPendingRequestsOnRestart=${srm.persistence.enable.clean-pending-on-restart}
(one-of?true|false|${srmPutCleanPendingRequestsOnRestart})\
srm.persistence.put.enable.clean-pending-on-restart=${srmPutCleanPendingRequestsOnRestart}

(deprecated,one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
srmCopyCleanPendingRequestsOnRestart=${srm.persistence.enable.clean-pending-on-restart}
(one-of?true|false|${srmCopyCleanPendingRequestsOnRestart})\
srm.persistence.copy.enable.clean-pending-on-restart=${srmCopyCleanPendingRequestsOnRestart}

(deprecated,one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
srmLsCleanPendingRequestsOnRestart=${srm.persistence.enable.clean-pending-on-restart}
(one-of?true|false|${srmLsCleanPendingRequestsOnRestart})\
srm.persistence.ls.enable.clean-pending-on-restart=${srmLsCleanPendingRequestsOnRestart}

(deprecated,one-of?true|false|${srm.persistence.enable.clean-pending-on-restart})\
srmReserveCleanPendingRequestsOnRestart=${srm.persistence.enable.clean-pending-on-restart}
(one-of?true|false|${srmReserveCleanPendingRequestsOnRestart})\
srm.persistence.reserve-space.enable.clean-pending-on-restart=${srmReserveCleanPendingRequestsOnRestart}


# ---- Period before old transfers are removed from the database
#
# The srm will hold SRM requests and their history in database for
# srm.persistence.keep-history-period days after that they will be removed.
#
(deprecated)srmKeepRequestHistoryPeriod=10
srm.persistence.keep-history-period=${srmKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS)srm.persistence.keep-history-period.unit=DAYS

(deprecated)srmGetKeepRequestHistoryPeriod=${srm.persistence.keep-history-period}
srm.persistence.get.keep-history-period=${srmGetKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
srm.persistence.get.keep-history-period.unit=${srm.persistence.keep-history-period.unit}

(deprecated)\
srmBringOnlineKeepRequestHistoryPeriod=${srm.persistence.keep-history-period}
srm.persistence.bring-online.keep-history-period=${srmBringOnlineKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
srm.persistence.bring-online.keep-history-period.unit=${srm.persistence.keep-history-period.unit}

(deprecated)srmPutKeepRequestHistoryPeriod=${srm.persistence.keep-history-period}
srm.persistence.put.keep-history-period=${srmPutKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
srm.persistence.put.keep-history-period.unit=${srm.persistence.keep-history-period.unit}

(deprecated)srmCopyKeepRequestHistoryPeriod=${srm.persistence.keep-history-period}
srm.persistence.copy.keep-history-period=${srmCopyKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
srm.persistence.copy.keep-history-period.unit=${srm.persistence.keep-history-period.unit}

(deprecated)srmLsKeepRequestHistoryPeriod=${srm.persistence.keep-history-period}
srm.persistence.ls.keep-history-period=${srmLsKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
srm.persistence.ls.keep-history-period.unit=${srm.persistence.keep-history-period.unit}

(deprecated)srmReserveKeepRequestHistoryPeriod=${srm.persistence.keep-history-period}
srm.persistence.reserve-space.keep-history-period=${srmReserveKeepRequestHistoryPeriod}
(one-of?HOURS|DAYS|${srm.persistence.keep-history-period.unit})\
srm.persistence.reserve-space.keep-history-period.unit=${srm.persistence.keep-history-period.unit}


#
# --- How frequently to remove old requests from the database.
#
(deprecated)srmExpiredRequestRemovalPeriod=60
srm.persistence.remove-expired-period=${srmExpiredRequestRemovalPeriod}

(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
srm.persistence.remove-expired-period.unit=SECONDS
(deprecated)srmGetExpiredRequestRemovalPeriod=${srm.persistence.remove-expired-period}
srm.persistence.get.remove-expired-period=${srmGetExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.persistence.remove-expired-period.unit})\
srm.persistence.get.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}

(deprecated)\
srmBringOnlineExpiredRequestRemovalPeriod=${srm.persistence.remove-expired-period}
srm.persistence.bring-online.remove-expired-period=${srmBringOnlineExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.persistence.remove-expired-period.unit})\
srm.persistence.bring-online.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}

(deprecated)srmPutExpiredRequestRemovalPeriod=${srm.persistence.remove-expired-period}
srm.persistence.put.remove-expired-period=${srmPutExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.persistence.remove-expired-period.unit})\
srm.persistence.put.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}

(deprecated)srmCopyExpiredRequestRemovalPeriod=${srm.persistence.remove-expired-period}
srm.persistence.copy.remove-expired-period=${srmCopyExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|DAYS|\
	${srm.persistence.remove-expired-period.unit})\
srm.persistence.copy.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}

(deprecated)srmLsExpiredRequestRemovalPeriod=${srm.persistence.remove-expired-period}
srm.persistence.ls.remove-expired-period=${srmLsExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.persistence.remove-expired-period.unit})\
	srm.persistence.ls.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}

(deprecated)\
srmReserveExpiredRequestRemovalPeriod=${srm.persistence.remove-expired-period}
srm.persistence.reserve-space.remove-expired-period=${srmReserveExpiredRequestRemovalPeriod}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.persistence.remove-expired-period.unit})\
srm.persistence.reserve-space.remove-expired-period.unit=${srm.persistence.remove-expired-period.unit}


# ---- Enables SRM request transition history logging
#
# Enables logging of transition history of SRM request in the
# database. The request transitions can be examined through the
# command line interface or through the the srmWatch monitoring tool.
#
# Enabling this feature increases the size and load of the database.
#
(deprecated,one-of?true|false)srmRequestHistoryDatabaseEnabled=false
(one-of?true|false|${srmRequestHistoryDatabaseEnabled})\
srm.persistence.enable.history=${srmRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable.history})\
srmGetRequestHistoryDatabaseEnabled=${srm.persistence.enable.history}
(one-of?true|false|${srmGetRequestHistoryDatabaseEnabled})\
srm.persistence.get.enable.history=${srmGetRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable.history})\
srmBringOnlineRequestHistoryDatabaseEnabled=${srm.persistence.enable.history}
(one-of?true|false|${srmBringOnlineRequestHistoryDatabaseEnabled})\
srm.persistence.bring-online.enable.history=${srmBringOnlineRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable.history})\
srmPutRequestHistoryDatabaseEnabled=${srm.persistence.enable.history}
(one-of?true|false|${srmPutRequestHistoryDatabaseEnabled})\
srm.persistence.put.enable.history=${srmPutRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable.history})\
srmCopyRequestHistoryDatabaseEnabled=${srm.persistence.enable.history}
(one-of?true|false|${srmCopyRequestHistoryDatabaseEnabled})\
srm.persistence.copy.enable.history=${srmCopyRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable.history})\
srmLsRequestHistoryDatabaseEnabled=${srm.persistence.enable.history}
(one-of?true|false|${srmLsRequestHistoryDatabaseEnabled})\
srm.persistence.ls.enable.history=${srmLsRequestHistoryDatabaseEnabled}

(deprecated,one-of?true|false|${srm.persistence.enable.history})\
srmReserveRequestHistoryDatabaseEnabled=${srm.persistence.enable.history}
(one-of?true|false|${srmReserveRequestHistoryDatabaseEnabled})\
srm.persistence.reserve-space.enable.history=${srmReserveRequestHistoryDatabaseEnabled}

# --- Store request transient state


(deprecated,one-of?true|false)srmStoreCompletedRequestsOnly=false
(immutable)srm.persistence.enable.store-transient-state.when-disable-is-true=false
(immutable)srm.persistence.enable.store-transient-state.when-disable-is-false=true
srm.persistence.enable.store-transient-state=${srm.persistence.enable.store-transient-state.when-disable-is-${srmStoreCompletedRequestsOnly}}

(deprecated,one-of?true|\
        false|\
        ${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}})\
	srmGetStoreCompletedRequestsOnly=${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}}
(immutable)srm.persistence.get.enable.store-transient-state.when-disable-is-true=false
(immutable)srm.persistence.get.enable.store-transient-state.when-disable-is-false=true
srm.persistence.get.enable.store-transient-state=${srm.persistence.get.enable.store-transient-state.when-disable-is-${srmGetStoreCompletedRequestsOnly}}

(deprecated,one-of?true|\
        false|\
	${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}})\
srmBringOnlineStoreCompletedRequestsOnly=${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}}
(immutable)srm.persistence.bring-online.enable.store-transient-state.when-disable-is-true=false
(immutable)srm.persistence.bring-online.enable.store-transient-state.when-disable-is-false=true
srm.persistence.bring-online.enable.store-transient-state=${srm.persistence.bring-online.enable.store-transient-state.when-disable-is-${srmBringOnlineStoreCompletedRequestsOnly}}

(deprecated,one-of?true|\
        false|\
	${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}})\
srmPutStoreCompletedRequestsOnly=${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}}
(immutable)srm.persistence.put.enable.store-transient-state.when-disable-is-true=false
(immutable)srm.persistence.put.enable.store-transient-state.when-disable-is-false=true
srm.persistence.put.enable.store-transient-state=${srm.persistence.put.enable.store-transient-state.when-disable-is-${srmPutStoreCompletedRequestsOnly}}

(deprecated,one-of?true|\
        false|\
	${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}})\
srmCopyStoreCompletedRequestsOnly=${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}}
(immutable)srm.persistence.copy.enable.store-transient-state.when-disable-is-true=false
(immutable)srm.persistence.copy.enable.store-transient-state.when-disable-is-false=true
srm.persistence.copy.enable.store-transient-state=${srm.persistence.copy.enable.store-transient-state.when-disable-is-${srmCopyStoreCompletedRequestsOnly}}

(deprecated,one-of?true|\
        false|\
	${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}})\
srmLsStoreCompletedRequestsOnly=${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}}
(immutable)srm.persistence.ls.enable.store-transient-state.when-disable-is-true=false
(immutable)srm.persistence.ls.enable.store-transient-state.when-disable-is-false=true
srm.persistence.ls.enable.store-transient-state=${srm.persistence.ls.enable.store-transient-state.when-disable-is-${srmLsStoreCompletedRequestsOnly}}

(deprecated,one-of?true|\
        false|\
	${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}})\
srmReserveSpaceStoreCompletedRequestsOnly=${srm.persistence.enable.store-transient-state.when-disable-is-${srm.persistence.enable.store-transient-state}}
(immutable)srm.persistence.reserve-space.enable.store-transient-state.when-disable-is-true=false
(immutable)srm.persistence.reserve-space.enable.store-transient-state.when-disable-is-false=true
srm.persistence.reserve-space.enable.store-transient-state=${srm.persistence.reserve-space.enable.store-transient-state.when-disable-is-${srmReserveSpaceStoreCompletedRequestsOnly}}


# Ls requests settings

# ---- Directory entries to include in list reply
#
# Number of entries allowed to be returnes in a single srmls
# request. Directory listings larger than this most be broken into
# multiple requests.
#
# Use 'infinity' to specify that there is no limit. Warning: Available
# heap memory will be an upper limit as the response cannot be
# streamed. Once heap limit is reached, the SRM will auto-restart.
#
(deprecated)srmLsMaxNumberOfEntries=1000
srm.limits.ls.entries=${srmLsMaxNumberOfEntries}

# ---- List recursion depth
#
# Maximum recursion depth.
#
(deprecated)srmLsMaxNumberOfLevels=infinity
srm.limits.ls.levels=${srmLsMaxNumberOfLevels}

# --- Request lifetimes

srm.request.lifetime=14400000
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.request.lifetime.unit=MILLISECONDS

(deprecated)srmGetLifeTime=${srm.request.lifetime}
srm.request.get.lifetime=${srmGetLifeTime}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.request.lifetime.unit})\
srm.request.get.lifetime.unit=${srm.request.lifetime.unit}

(deprecated)srmBringOnlineLifeTime=${srm.request.lifetime}
srm.request.bring-online.lifetime=${srmBringOnlineLifeTime}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.request.lifetime.unit})\
srm.request.bring-online.lifetime.unit=${srm.request.lifetime.unit}

(deprecated)srmPutLifeTime=${srm.request.lifetime}
srm.request.put.lifetime=${srmPutLifeTime}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.request.lifetime.unit})\
srm.request.put.lifetime.unit=${srm.request.lifetime.unit}

(deprecated)srmCopyLifeTime=${srm.request.lifetime}
srm.request.copy.lifetime=${srmCopyLifeTime}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${srm.request.lifetime.unit})\
srm.request.copy.lifetime.unit=${srm.request.lifetime.unit}

# ---- File system root exported by the srm service
(deprecated)pnfsSrmPath=/
srm.root=${pnfsSrmPath}

# Cell address of pnfsmanager service
srm.service.pnfsmanager=${dcache.service.pnfsmanager}

# Timeout for pnfsmanager requests
(deprecated)srmPnfsTimeout=300
srm.service.pnfsmanager.timeout=${srmPnfsTimeout}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|DAYS)\
srm.service.pnfsmanager.timeout.unit=SECONDS

# Cell address of gplazma service
srm.service.gplazma=${dcache.service.gplazma}

# Timeout for gplazma requests
srm.service.gplazma.timeout=30000
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.service.gplazma.timeout.unit=MILLISECONDS

# gPlazma authorization cache size
srm.service.gplazma.cache.size=1000
(deprecated)srmAuthzCacheLifetime=180

# gPlazma authorization cache lifetime
srm.service.gplazma.cache.timeout=${srmAuthzCacheLifetime}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.service.gplazma.cache.timeout.unit=SECONDS

# Cell address of spacemanager service
srm.service.spacemanager=${dcache.service.spacemanager}

# Timeout for spacemanager requests
srm.service.spacemanager.timeout=180
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.service.spacemanager.timeout.unit=SECONDS

# Cell address of transfermanager service
srm.service.transfermanager=${dcache.service.transfermanager}

# Timeout for transfermanager requests
srm.service.transfermanager.timeout=24
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.service.transfermanager.timeout.unit=HOURS

# Cell address of copymanager service
srm.service.copymanager=${dcache.service.copymanager}

# Timeout for copymanager requests
srm.service.copymanager.timeout=24
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.service.copymanager.timeout.unit=HOURS

# Cell address of billing service
srm.service.billing = ${dcache.service.billing}

# Cell address of pinmanager service
srm.service.pinmanager=${dcache.service.pinmanager}

# Timeout for pinmanager requests
srm.service.pinmanager.timeout=60
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.service.pinmanager.timeout.unit=MINUTES

# Cell address of poolmanager service
srm.service.poolmanager=${dcache.service.poolmanager}

# Timeout for poolmanager requests
(deprecated)srmPoolManagerTimeout=300
srm.service.poolmanager.timeout=${srmPoolManagerTimeout}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.service.poolmanager.timeout.unit=SECONDS

# Cell address of login broker the SRM registers with
(deprecated)srm.loginbroker=LoginBroker
srm.service.loginbroker=${srm.loginbroker}

# How often the SRM registers with the loginbroker (seconds)
(deprecated)srm.loginbroker.period=${dcache.service.loginbroker.update-period}
srm.service.loginbroker.update-period=${srm.loginbroker.period}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${dcache.service.loginbroker.update-period.unit})\
srm.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}

# Threshold for load changes in SRM to trigger loginbroker registration
#
# The registration with a login broker contains information about
# the current load of SRM. If the load changes rapidly, then a
# door may updates its registration before the next scheduled update
# time. This parameter specifies the fraction of the load that
# triggers a reregistration.
(deprecated)srm.loginbroker.threshold=${dcache.service.loginbroker.update-threshold}
srm.service.loginbroker.update-threshold=${srm.loginbroker.threshold}

# Protocol version registered in login broker
(deprecated)srm.loginbroker.version=1.1.1
srm.service.loginbroker.version=${srm.loginbroker.version}

# Protocol family registered in login broker
(deprecated)srm.loginbroker.family=srm
srm.service.loginbroker.family=${srm.loginbroker.family}


# ---- Enable automatic creation of directories
#
# Allow automatic creation of directories via SRM.
#
#  allow=true, disallow=false
#
(deprecated,one-of?true|false)RecursiveDirectoryCreation=true
(one-of?true|false|${RecursiveDirectoryCreation})\
srm.enable.recursive-directory-creation=${RecursiveDirectoryCreation}


# ---- Allow delete via SRM v1.1
#
# Allow deletion of files via the SRM v1.1 interface. This setting has no effect on
# the SRM v2.2 interface.
#
#  allow=true, disallow=false
#
(deprecated,one-of?true|false)AdvisoryDelete=true
(one-of?true|false|${AdvisoryDelete})srm.enable.advisory-delete=${AdvisoryDelete}

# ---- Enable overwrite for SRM
#
# Defines how to respond to write requests to files that already exist.
#
# If srm.enable.overwrite is false, any request to overwrite an existing file will
# be rejected.
#
# If srm.enable.overwrite is enabled, the response depends on whether the SRM v1.1
# or SRM v2.2 interface is used. #For SRM v2.2, the write request contains a flag
# allowing the client to indicate whether it wants an existing file to be overwritten.
# If present, the flag is respected. If not present, the srm.enable.overwrite-by-default
# flag controls whether an existing file is overwritten or not. For SRM v1.1, the write
# request contains no such flag and srm.enable.overwrite-by-default controls whether an
# existing file is overwritten.
#
# Note that setting srm.enable.overwrite to false or srm.enable.overwrite-by-default
# to true violates the SRM 2.2 specification. That is, the defaults are required
# for standards-compliance.
#
(one-of?true|false|${dcache.enable.overwrite})\
srm.enable.overwrite=${dcache.enable.overwrite}
(deprecated,one-of?true|false)srmOverwriteByDefault=false
(one-of?true|false|${srmOverwriteByDefault})\
srm.enable.overwrite-by-default=${srmOverwriteByDefault}

# ---- Number of concurrent file deletions
#
# To avoid starving other name space operations, the srm throttles
# bulk file deletion. This setting controls the number of concurrent
# file deletion requests submitted to PnfsManager.
#
(deprecated)srmSizeOfSingleRemoveBatch=50
srm.limits.remove-batch-size=${srmSizeOfSingleRemoveBatch}

# path to host certificate
srm.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Host key
srm.authn.hostcert.key=${dcache.authn.hostcert.key}

# Host key refresh interval
srm.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${dcache.authn.hostcert.refresh.unit})\
srm.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}

# Path to CA directory
srm.authn.capath=${dcache.authn.capath}

# How often to check the CA certificates for updates
srm.authn.capath.refresh=${dcache.authn.capath.refresh}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS|\
	${dcache.authn.capath.refresh.unit})\
srm.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}

# Path to vomsdir directory
srm.authn.vomsdir=${dcache.authn.vomsdir}

# ---- Directory for delegated proxy certificates
#
# This is the directory in which the delegated user credentials will
# be stored as files. We recommend set permissions to 700 on this
# directory.
#
(deprecated)srmUserCredentialsDirectory=@srmUserCredentialsDirectory@
srm.user.credentials.directory=${srmUserCredentialsDirectory}

# ---- Database threads
#
# Database updates are queued and their execution is decoupled from
# the execution of SRM requests. The setting controls the number of
# the threads that will be dedicated to execution of these updates.
#
(deprecated)srmJdbcExecutionThreadNum=5
srm.limits.db.threads=${srmJdbcExecutionThreadNum}

# ---- Database request queue depth
#
# Database updates are queued and their execution is decoupled from
# the execution of SRM requests. The setting controls the maximum
# length of the queue.
#
(deprecated)srmMaxNumberOfJdbcTasksInQueue=1000
srm.limits.db.queue=${srmMaxNumberOfJdbcTasksInQueue}

# ---- srmClientDNSLookup
#
# Perform the lookup of the client hostname based on the client's IP
# address. The result is used in pool selection. If srmClientDNSLookup
# is set to false the client's IP address is used.
#
(deprecated,one-of?true|false)srmClientDNSLookup=false
(one-of?true|false|${srmClientDNSLookup})\
srm.enable.client-dns-lookup=${srmClientDNSLookup}

# set graceful shutdown timeout. If set, the internal doStop() method
# will not immediately stop the server. Instead, all Connectors will
# be closed so that new connections will not be accepted and all handlers that
# implement Server.Graceful will be put into the shutdown mode so that no
# new requests will be accepted, but existing requests can complete.
# The server will then wait the configured timeout before stopping.
(deprecated)srmGracefulShutdown=2000
srm.limits.jetty.graceful-shutdown=${srmGracefulShutdown}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.limits.jetty.graceful-shutdown.unit=MILLISECONDS

# ---- Enable custom address resolution.
#
#   The srmCustomGetHostByAddr option enables a custom IP resolution
#   if the standard InetAddress method fails. Contributed by BNL.
#
(deprecated,one-of?true|false)srmCustomGetHostByAddr=false
(one-of?true|false|${srmCustomGetHostByAddr})\
srm.enable.custom-get-host-by-address=${srmCustomGetHostByAddr}

# ----- Disallowed protocols for get requests
#
# Comma separated list of protocols that will not be used even if both
# client and server support it.
#
srm.protocols.disallowed.get = ${srm.service.loginbroker.family}

# ----- Disallowed protocols for put requests
#
# Comma separated list of protocols that will not be used even if both
# client and server support it.
#
srm.protocols.disallowed.put = http,${srm.service.loginbroker.family}

# ----- Preferred transfer protocols
#
# Ordered comma separated list of preferred transfer protocols. If
# supported by both client and server, protocols early in this list
# will be preferred to protocols later in the list or not in the
# list at all. If no common protocol is found, the first protocol in
# the clients list supported by the server is used.
#
# Setting this property to a non-empty list means the clients protocol
# preference is ignored, which is usually not a good thing. The classic
# use case for this property is as a workaround for clients that assign
# high priority to protocols the server admin tries to avoid.
srm.protocols.preferred =

# ---- Cell address of login broker the SRM will ask to locate doors
(deprecated)srm.lookup.loginbroker=${dcache.service.loginbroker}
srm.protocols.loginbroker=${srm.lookup.loginbroker}

# ---- Login broker cache life time in milliseconds
(deprecated)srmLoginBrokerUpdatePeriod=3000
(deprecated)srm.lookup.period=${srmLoginBrokerUpdatePeriod}
srm.protocols.loginbroker.period=${srm.lookup.period}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.protocols.loginbroker.period.unit=MILLISECONDS

# ---- Login broker lookup timeout after which a request is retried (seconds)
(deprecated)srm.lookup.timeout=${srmPnfsTimeout}
srm.protocols.loginbroker.timeout=${srm.lookup.timeout}
(one-of?MILLISECONDS|\
	SECONDS|\
	MINUTES|\
	HOURS|\
	DAYS)\
srm.protocols.loginbroker.timeout.unit=SECONDS

# ---- Number of doors in random door selection
#
# SRM will order doors according to their load and select certain
# number of the least loaded and then randomly choose which one to
# use.
#
(deprecated)srmNumberOfDoorsInRandomSelection=5
(deprecated)srm.lookup.population-size=${srmNumberOfDoorsInRandomSelection}
srm.protocols.population-size=${srm.lookup.population-size}



# ----- Whether to pin disk files
#
# The SRM protocol allows files to be pinned. The pin suppresses
# automatic garbage collection for the lifetime of the pin.
#
# Since dCache pools may be configured to only serve particular types
# of requests and not every pool may be configured to serve a
# particular read request, strict protocol compliance requires pinning
# even for disk only files.
#
# Often strict protocol compliance is however unnecessary, or disk
# files may be known to always be on read pools. In those cases one
# can skip the pinning step and thus reduce the latency of
# srmPrepareToGet request.
#
# When this property is set to false, files with access latency of
# ONLINE will not be pinned. If all files in the system have access
# latency of ONLINE, then the SRM will not use the pin manager at
# all. Note that when this property is set to false, orphaned file
# location entries in the name space will not validated during the
# srmPrepareToGet processing. The consequence is that the
# srmPrepareToGet may succeed for a lost and the subsequence file
# transfer will fail.
#
(deprecated,one-of?true|false)srmPinOnlineFiles=true
(one-of?true|false|${srmPinOnlineFiles})\
srm.enable.pin-online-files=${srmPinOnlineFiles}

# ---- Quality of Service plugins
#
# to enable terapath plugin define:
# qosPluginClass=org.dcache.srm.qos.terapaths.TerapathsPlugin
# qosConfigFile=${dcache.paths.config}/terapaths.properties
#
# to enable lambda station plugin define:
# qosPluginClass=org.dcache.srm.qos.terapaths.LambdaStation
# qosConfigFile=${dcache.paths.config}/lambdastation.properties
#
(deprecated)qosPluginClass=
srm.plugins.qos.class=${qosPluginClass}

(deprecated)qosConfigFile=
srm.plugins.qos.config.file=${qosConfigFile}

(one-of?true|false|${dcache.enable.space-reservation})\
srm.enable.space-reservation=${dcache.enable.space-reservation}


#  Security related properties
(deprecated)srm.security.ciphers=${dcache.authn.ciphers}
srm.authn.ciphers=${srm.security.ciphers}

#
# ---- Third-party transfers
#
#  Third-party copying is when a client requests that data is sent
#  between this dCache cluster and some other storage system without
#  that client acting as an intermediate for the flow of data.
#
#  With a third-party copy initiatied through the SRM protocol, the
#  client may either specify a protocol-specific endpoint (e.g.,
#  'https://storage.example.org/path/to/remote-file'), or an SRM
#  endpoint (e.g., 'srm://storage.example.org/path/to/remote-file').
#  If an SRM endpoint is specified then dCache will negotiate with the
#  remote server to find the best available transfer protocol.
#
#  dCache will try to verify the integrity of transferred data by
#  comparing locally generated checksum values with that obtained from
#  the remote server.  If the transfer did not use the SRM protocol
#  then checksums can only be obtained via the transfer protocol.
#
#  If the transfer protocol is HTTP then RFC 3230 allows dCache to
#  discover checksums for the remote file.  With this, dCache can
#  learn if the file was corrupted during transfer.  If the remote
#  server supports RFC 3230 and the remote server uses a compatible
#  checksum algorithm then dCache will always verify the data
#  integrity.
#
#  Although dCache supports RFC 3230, most HTTP and WebDAV servers
#  currently do not.  It is also possible that, although the remote
#  server supports RFC 3230, the supplied checksum cannot be used by
#  dCache.  When transferring data with such a server, dCache can
#  either transfer the file's data without checksum verification or
#  fail the request.
#
#  The SRM protocol allows the client to steer the transfer by setting
#  ExtraInfo options.  dCache accepts the 'verify' ExtraInfo option
#  with a value of 'true' or 'false'.  If 'true' then checksum
#  verification is required for the transfers and the failure to
#  obtain a suitable checksum will fail the transfer.  If 'false' then
#  dCache will still attempt to verify data integrety but the transfer
#  will not fail because of dCache was unable to verify the data
#  integrety by checking a checksum.  See SRM client documentation for
#  details on how to set ExtraInfo options.
#
#  If the client leaves this option unspecified then the following
#  property's value is used as a default.
#
(one-of?true|false)srm.enable.third-party.requiring-verification-by-default = true


#
#   Document which TCP ports are opened
#
(immutable)srm.net.ports.tcp=${srm.net.port}


#
#  Obsolete or Forbidden properties
#
(obsolete)srmIgnoreClientProtocolOrder = Use srm.protocols.preferred instead (set to gsiftp,gsidcap to achieve the same effect)
(obsolete)srm.db.driver=The property is not needed with JDBC 4 drivers
(obsolete)srmImplicitSpaceManagerEnabled = Configure space manager to allow unreserved uploads instead
(obsolete)srm.enable.space-reservation.implicit = Configure space manager to allow unreserved uploads instead
(obsolete)srmSpaceReservationStrict = No longer needed
(obsolete)srm.enable.space-reservation.strict = No longer needed

(obsolete)srm.service.webdav.root=No longer needed
(obsolete)srm.service.xrootd.root=No longer needed
(forbidden)srm.db.connections.partition-count = Hikari database connection pool has no partitions
(forbidden)srm.db.connections.max-per-partition = Consider using srm.db.connections.max instead
(forbidden)srm.db.connections.min-per-partition = Consider using srm.db.connections.idle instead

(obsolete)srm.request.ready-queue-size = No longer used
(obsolete)srmGetReqReadyQueueSize = No longer used
(obsolete)srm.request.get.ready-queue-size = No longer used
(obsolete)srmBringOnlineReqReadyQueueSize = No longer used
(obsolete)srm.request.bring-online.ready-queue-size = No longer used
(obsolete)srmPutReqReadyQueueSize = No longer used
(obsolete)srm.request.put.ready-queue-size = No longer used
(obsolete)srm.request.ls.ready-queue-size = No longer used
(obsolete)srmReserveReqReadyQueueSize = No longer used
(obsolete)srm.request.reserve-space.ready-queue-size = No longer used
(obsolete)srmBringOnlineReqMaxReadyRequests = No longer used
(obsolete)srm.request.bring-online.max-ready-requests = No longer used
(obsolete)srm.request.ls.max-ready-requests = No longer used
(obsolete)srmReserveReqMaxReadyRequests = No longer used
(obsolete)srm.request.reserve-space.max-ready-requests = No longer used
(obsolete)srm.request.thread-queue-size = See srm.request.max-requests
(obsolete)srmGetReqThreadQueueSize = See srm.request.get.max-requests
(obsolete)srm.request.get.thread-queue-size = See srm.request.get.max-requests
(obsolete)srmBringOnlineReqThreadQueueSize = See srm.request.bring-online.max-requests
(obsolete)srm.request.bring-online.thread-queue-size = See srm.request.bring-online.max-requests
(obsolete)srmPutReqThreadQueueSize = See srm.request.put.max-requests
(obsolete)srm.request.put.thread-queue-size = See srm.request.put.max-requests
(obsolete)srmCopyReqThreadQueueSize = See srm.request.copy.max-requests
(obsolete)srm.request.copy.thread-queue-size = See srm.request.copy.max-requests
(obsolete)srmLsRequestThreadQueueSize = See srm.request.ls.max-requests
(obsolete)srm.request.ls.thread-queue-size = See srm.request.ls.max-requests
(obsolete)srmReserveReqThreadQueueSize = See srm.request.reserve-space.max-requests
(obsolete)srm.request.reserve-space.thread-queue-size = See srm.request.reserve-space.max-requests
(obsolete)srm.request.max-waiting-requests = See srm.request.max-inprogress
(obsolete)srmGetReqMaxWaitingRequests = See srm.request.get.max-inprogress
(obsolete)srm.request.get.max-waiting-requests = See srm.request.get.max-inprogress
(obsolete)srmBringOnlineReqMaxWaitingRequests = See srm.request.bring-online.max-inprogress
(obsolete)srm.request.bring-online.max-waiting-requests = See srm.request.bring-online.max-inprogress
(obsolete)srmPutReqMaxWaitingRequests = See srm.request.put.max-inprogress
(obsolete)srm.request.put.max-waiting-requests = See srm.request.put.max-inprogress
(obsolete)srmCopyReqMaxWaitingRequests = See srm.request.copy.max-inprogress
(obsolete)srm.request.copy.max-waiting-requests = See srm.request.copy.max-inprogress
(obsolete)srmLsRequestMaxWaitingRequests = See srm.request.ls.max-inprogress
(obsolete)srm.request.ls.max-waiting-requests = See srm.request.ls.max-inprogress
(obsolete)srmReserveReqMaxWaitingRequests = See srm.request.reserve-space.max-inprogress
(obsolete)srm.request.reserve-space.max-waiting-requests = See srm.request.reserve-space.max-inprogress
