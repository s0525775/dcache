#  -----------------------------------------------------------------------
#     Default values for WebDAV doors
#  -----------------------------------------------------------------------
@DEFAULTS_HEADER@

#  ---- Cell name of WebDAV door
#
webdav.cell.name=WebDAV-${host.name}

#  ---- Whether to export the webdav cell as a well known cell
#
#  This property controls whether the webdav cell is published as
#  a well known cell. Well known cells are addressable through their
#  cell name, while other cells are only addressable from other domains
#  using their fully qualified cell address.
(one-of?true|false)webdav.cell.export=true

# Whether space reservations are supported
(one-of?true|false|${dcache.enable.space-reservation})webdav.enable.space-reservation=${dcache.enable.space-reservation}

# Whether the missing-files service is supported
(one-of?true|false|${dcache.enable.missing-files})webdav.enable.missing-files=${dcache.enable.missing-files}

# Cell address of pnfsmanager service
webdav.service.pnfsmanager=${dcache.service.pnfsmanager}

# Timeout for pnfsmanager requests
(deprecated)webdavPnfsTimeout=120000
webdav.service.pnfsmanager.timeout=${webdavPnfsTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.pnfsmanager.timeout.unit=MILLISECONDS

# Cell address for transfermanager service
webdav.service.transfermanager = ${dcache.service.transfermanager}

# Timeout for transfermanager requests
webdav.service.transfermanager.timeout = 30
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
webdav.service.transfermanager.timeout.unit = SECONDS


# Cell address for poolmanager service
webdav.service.poolmanager=${webdav.service.poolmanager-space-${webdav.enable.space-reservation}}
(immutable)webdav.service.poolmanager-space-false=${dcache.service.poolmanager}
(immutable)webdav.service.poolmanager-space-true=${dcache.service.spacemanager}

# Timeout for poolmanager requests
(deprecated)webdavPoolManagerTimeout=300000
webdav.service.poolmanager.timeout=${webdavPoolManagerTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.poolmanager.timeout.unit=MILLISECONDS

# Timeout for pool requests
(deprecated)webdavPoolTimeout=10000
webdav.service.pool.timeout=${webdavPoolTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.pool.timeout.unit=MILLISECONDS

# Cell address of gplazma service
webdav.service.gplazma=${dcache.service.gplazma}

# Timeout for gplazma requests
(deprecated)webdavGplazmaTimeout=180000
webdav.service.gplazma.timeout=${webdavGplazmaTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.service.gplazma.timeout.unit=MILLISECONDS

# Cell address of billing service
webdav.service.billing=${dcache.service.billing}

# Cell address of loginbroker to register with
webdav.service.loginbroker=${dcache.service.loginbroker}

# Information for loginbroker registration
webdav.service.loginbroker.update-period=${dcache.service.loginbroker.update-period}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.service.loginbroker.update-period.unit})\
  webdav.service.loginbroker.update-period.unit=${dcache.service.loginbroker.update-period.unit}
webdav.service.loginbroker.update-threshold=${dcache.service.loginbroker.update-threshold}
webdav.service.loginbroker.version=1.1
webdav.service.loginbroker.family=${webdav.service.loginbroker.family-${webdav.authn.protocol}}
(immutable)webdav.service.loginbroker.family-http=http
(immutable)webdav.service.loginbroker.family-https=https
(immutable)webdav.service.loginbroker.family-https-jglobus=https

# Cell address of missing-files service
webdav.service.missing-files=${dcache.service.missing-files}

# Timeout for missing-files requests
webdav.service.missing-files.timeout=${dcache.service.missing-files.timeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.service.missing-files.timeout.unit})\
  webdav.service.missing-files.timeout.unit=${dcache.service.missing-files.timeout.unit}


#  ---- Mover queue
#
#   The mover queue on the pool to which WebDAV transfers will be
#   scheduled. If blank, the default queue will be used.
#
(deprecated)webdavIoQueue=
webdav.mover.queue=${webdavIoQueue}

#  ---- Mover kill timeout
#
#   Specifies the timeout after which the WebDAV door
#   gives up on waiting for a mover to respond to a kill request.
#
(deprecated)webdavKillTimeout=1500
webdav.mover.kill-timeout=${webdavKillTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.mover.kill-timeout.unit=MILLISECONDS

#  ---- Mover queue timeout
#
#   Specifies the timeout after which the WebDAV door
#   gives up on waiting for a mover to start. This places a bound on
#   the maximum mover queue time.
#
(deprecated)webdavMoverTimeout=180000
webdav.mover.timeout=${webdavMoverTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.mover.timeout.unit=MILLISECONDS

#  ---- Mover finished timeout
#
#   Specifies the timeout for how long the WebDAV door
#   waits for a confirmation from the mover after a transfer has
#   completed.
#
(deprecated)webdavTransferConfirmationTimeout=60000
webdav.mover.transfer-confirmation-timeout=${webdavTransferConfirmationTimeout}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)webdav.mover.transfer-confirmation-timeout.unit=MILLISECONDS

#  ---- SRM discovery
#
#   Third-party copying is when a client requests that data is sent
#   between this dCache cluster and some other storage system without
#   that client acting as an intermediate for the flow of data.
#
#   To support 3rd-party copies, the WebDAV door needs a running SRM
#   door instance.  This is because the SRM holds user-credentials
#   that may be needed for dCache to authenticate with the 3rd-party
#   site.  The location of the SRM door is discovered automatically
#   and the following options adjust that discovery procedure.
#
#   Specify which loginbroker service to query for information about
#   SRM doors.
#
webdav.srm-discovery.loginbroker = ${dcache.service.loginbroker}

#
#   Specifies how long to wait for a response when querying the
#   loginbroker for information.
#
webdav.srm-discovery.loginbroker.timeout = 10
(one-of?MILLISECONDS|\
        SECONDS|\
        MINUTES|\
        HOURS|\
        DAYS)\
webdav.srm-discovery.loginbroker.timeout.unit = SECONDS

#   Specifies the timeout in milliseconds for how long the WebDAV door
#   waits for the SRM to send a delegated credential from its
#   credential store.
#
webdav.service.srm.timeout = 20
(one-of?MILLISECONDS|\
        SECONDS|\
        MINUTES|\
        HOURS|\
        DAYS)\
webdav.service.srm.timeout.unit = SECONDS


#   The time between successive progress reports for third-party
#   transfers.
webdav.third-party-transfers.performance-marker-period = 5

(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
webdav.third-party-transfers.performance-marker-period.unit = SECONDS


#   dCache will try to verify the integrity of transferred data by
#   comparing locally generated checksum values with that obtained
#   from the remote server.  If the transfer protocol is HTTP then RFC
#   3230 allows dCache to discover checksums for the remote file.
#   With this, dCache can learn if the file was corrupted during
#   transfer.  If the remote server supports RFC 3230 and the remote
#   server uses a compatible checksum algorithm then dCache will
#   always verify the data integrity.
#
#   Although dCache supports RFC 3230, most HTTP and WebDAV servers
#   currently do not.  It is also possible that, although the remote
#   server supports RFC 3230, the supplied checksum cannot be used by
#   dCache.  When transferring data with such a server, dCache can
#   either transfer the file's data without checksum verification or
#   fail the request.
#
#   The RequireChecksumVerification HTTP header allows the client to
#   control whether checksum verification is required.  dCache accepts
#   the this header with values of 'true' or 'false'.  If 'true' then
#   checksum verification is required for the transfers and the
#   failure to obtain a suitable checksum will fail the transfer.  If
#   'false' then dCache will still attempt to verify data integrety
#   but the transfer will not fail because of dCache was unable to
#   verify the data integrety by checking a checksum.
#
#   If the client does not specify RequireChecksumVerification as part
#   of the header then the following property's value is used as a
#   default.

(one-of?true|false)webdav.enable.third-party.requiring-verification-by-default = true

#  ---- TCP port for WebDAV door
#
#   Specifies the TCP port on which the WebDAV door accepts connections.
#
(deprecated)webdavPort=2880
webdav.net.port=${webdavPort}

#  ---- What IP address to listen on for WebDAV door
#
#   Specifies the IP address to which the WebDAV door listens for
#   connections from clients. Defaults to the wildcard address.
#
(deprecated)webdavAddress=${dcache.net.listen}
webdav.net.listen=${webdavAddress}

#  ---- What IP address to use for connections from the WebDAV door to pools
#
#   When the data transfer is proxied through the door, this property is
#   used as a hint for the pool to select an interface to listen to for
#   the internal connection created from the door to the pool.
#
(deprecated)webdavInternalAddress=
webdav.net.internal=${webdavInternalAddress}

#  ---- Whether to redirect GET requests to a pool
#
#   If true, WebDAV doors will respond with a 302 redirect pointing to
#   a pool holding the file. This requires that a pool can accept
#   incoming TCP connections and that the client follows the
#   redirect. If false, data is relayed through the door. The door
#   will establish a TCP connection to the pool.
#
(one-of?true|false)webdav.redirect.on-read=true

#  ---- Whether to redirect PUT requests to a pool
#
#   If true, WebDAV doors will respond with a 307 redirect pointing to
#   a pool to which to upload the file. This requires that a pool can
#   accept incoming TCP connections and that the client follows the
#   redirect. If false, data is relayed through the door. The door
#   will establish a TCP connection to the pool. Only clients that send
#   a Expect: 100-Continue header will be redirected - other requests
#   will always be proxied through the door.
#
(one-of?true|false)webdav.redirect.on-write=true

#  ---- Root path of WebDAV door
#
#   Specifies the root directory exposed through the WebDAV door.
#
(deprecated)webdavRootPath=/
webdav.root=${webdavRootPath}

#  ---- Whether existing files may be overwritten
#
#   The WebDAV protocol specifies that a PUT overwrites existing files
#   (but not directories). If this property is set to true, then
#   dCache honors this aspect of the WebDAV specification. If set to
#   false, attempts to overwrite existing files will be denied.
#
#   Some clients expect that PUT indeed overwrites existing files. In
#   particular Mac OS X is known to have issues writing and deleting
#   files with dCache when this property is false.
#
(deprecated,one-of?true|false|${dcache.enable.overwrite})webdav.overwrite=${dcache.enable.overwrite}
(one-of?true|false|${webdav.overwrite})webdav.enable.overwrite=${webdav.overwrite}

#  ---- Upload directory
#
#   The webdav door restricts access to the user's root directory (as defined
#   by gPlazma). The upload directory is an exception to this rule. The directory
#   is typically used by SRM for uploading files.
#
webdav.authz.upload-directory=${dcache.upload-directory}

#  ---- Paths which are accessible through WebDAV
#
#   This parameter is set to the absolute paths to directories
#   accessible through WebDAV. Multiple directories are separated by a
#   colon.
#
(deprecated)webdavAllowedPaths=/
webdav.authz.allowed-paths=${webdavAllowedPaths}

#  ---- Whether the WebDAV door is read only
#
#   When set to true, only read operations are allowed through WebDAV.
#
(deprecated,one-of?true|false)webdavReadOnly=false
(one-of?true|false|${webdavReadOnly})webdav.authz.readonly=${webdavReadOnly}

#  ---- Level of access granted to anonymous users through WebDAV
#
#   Specifies which HTTP methods are granted to anonymous
#   clients. NONE specifies that all anonymous requests will be
#   rejected; READONLY specifies that only read requests are allowed
#   (that is, GET, HEAD, OPTIONS and PROPFIND); FULL specifies that
#   all HTTP methods are allowed.
#
#   Anonymous clients are still subject to authorisation: Only
#   operations with world access are granted.
#
(deprecated,one-of?NONE|READONLY|FULL)webdavAnonymousAccess=NONE
(one-of?NONE|READONLY|FULL|${webdavAnonymousAccess})webdav.authz.anonymous-operations=${webdavAnonymousAccess}

#  ---- Whether anonymous listing is allowed
#
#   When false, unauthenticated users are prevented from listing the
#   contents of directories.  When true and webdavAnonymousAccess is
#   not 'NONE' then unauthenticated users may list the contents of any
#   world-readable directory.
#
(deprecated,one-of?true|false)webdavAnonymousListing=true
(one-of?true|false|${webdavAnonymousListing})webdav.authz.anonymous-listing=${webdavAnonymousListing}

#  ---- Whether to use HTTP or HTTPS for WebDAV
#
#   Specifies whether the HTTP or the HTTPS protocol is used. For
#   HTTPS, a server certificate and a trust store need to be
#   created.
#
#   Alternatively to https, the https-jglobus option provides HTTPS
#   support through the JGlobus library. JGlobus accesses the host and
#   CA certificates in /etc/grid-security/ directly. In contrast to
#   the plain Java SSL implementation JGlobus accepts proxy
#   certificates, including VOMS proxy certificates. The protocol
#   between the client and the server is however the same for https
#   and https-jglobus.
#
(deprecated,one-of?http|https|https-jglobus)webdavProtocol=http
(one-of?http|https|https-jglobus|${webdavProtocol})webdav.authn.protocol=${webdavProtocol}

#  ---- Server certificate
#
#   This parameter specifies the path to the file containing the
#   PKCS12 encoded server certificate. When using https as the
#   webdav.authn.protocol, the host certificate in /etc/grid-security/ needs
#   to be converted to PKCS12 format before it can be used with the
#   WebDAV door. Use the 'bin/dcache import hostcert' command to
#   perform this task.
#
(deprecated)webdavKeyStore=${dcache.authn.keystore}
webdav.authn.keystore=${webdavKeyStore}

#  ---- Password for server certificate
#
#   This parameter specifies the password with which the PKCS12 encoded
#   server certificate is encrypted.
#
(deprecated)webdavKeyStorePassword=${dcache.authn.keystore.password}
webdav.authn.keystore.password=${webdavKeyStorePassword}

#  ---- Trusted CA certificates
#
#   This parameter specifies the path to a Java Keystore containing
#   the the trusted CA certicates used by the WebDAV door. When using
#   https as the webdav.authn.protocol, the CA certificates in
#   /etc/grid-security/certificates/ need to be converted into a Java
#   Keystore file before they can be used with the WebDAV door. Use
#   the 'bin/dcache import cacerts' command to perform this task.
#
(deprecated)webdavTrustStore=${dcache.authn.truststore}
webdav.authn.truststore=${webdavTrustStore}

#  ---- Password for trusted CA certificates
#
#   This parameter specifies the password with which the Java Keystore
#   containing the trusted CA certificates is encrypted.
#
(deprecated)webdavTrustStorePassword=${dcache.authn.truststore.password}
webdav.authn.truststore.password=${webdavTrustStorePassword}

#  ---- Whether client certificates are accepted for HTTPS
#
#   This parameter specifies whether the WebDAV door will accept a client
#   certificate for authentication.
#
(deprecated,one-of?true|false)webdavWantClientAuth=true
(one-of?true|false|${webdavWantClientAuth})webdav.authn.accept-client-cert=${webdavWantClientAuth}

#  ---- Whether client certificates are required for HTTPS
#
#   This parameter specifies whether the WebDAV door will require a
#   client certificate for authentication.
#
(deprecated,one-of?true|false)webdavNeedClientAuth=false
(one-of?true|false|${webdavNeedClientAuth})webdav.authn.require-client-cert=${webdavNeedClientAuth}

#  ---- Whether HTTP Basic authentication is enabled
#
#   When enabled a user name and password will be requested on
#   authorization failures.
#
#   Note that HTTP Basic authentication essentially transfers
#   passwords in clear text. A secure setup should only use HTTP Basic
#   authentication over HTTPS.
#
(deprecated,one-of?true|false)webdavBasicAuthentication=false
(one-of?true|false|${webdavBasicAuthentication})webdav.authn.basic=${webdavBasicAuthentication}

# Host certificate for https-jglobus authentication
webdav.authn.hostcert.cert=${dcache.authn.hostcert.cert}

# Host key for https-jglobus authentication
webdav.authn.hostcert.key=${dcache.authn.hostcert.key}

# How often to check the host certificate for updates
webdav.authn.hostcert.refresh=${dcache.authn.hostcert.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.hostcert.refresh.unit})webdav.authn.hostcert.refresh.unit=${dcache.authn.hostcert.refresh.unit}

# Path to directory with trusted CA certificates for https-jglobus authentication
webdav.authn.capath=${dcache.authn.capath}

# How often to check the CA certificates for updates
webdav.authn.capath.refresh=${dcache.authn.capath.refresh}
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS|${dcache.authn.capath.refresh.unit})webdav.authn.capath.refresh.unit=${dcache.authn.capath.refresh.unit}

# ---- Threads that accept TCP connections
#
# The number of threads that accept and dispatch new client connections.
# Except under very high connection rates, a single thread should be
# sufficient.
#
webdav.limits.acceptors=1

# ---- Time before an idle connection is closed
#
# An idle connection is one on which no data is transferred.
#
# Note that a connection may appear idle because the WebDAV door is blocked
# on other operations on dCache, such as waiting for a file to stage from
# tape, or waiting for a mover to start. It is advisable that this timeout
# is not lower than the individual timeouts configured for talking to other
# dCache services.
#
webdav.limits.idle-time=300
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
webdav.limits.idle-time.unit=SECONDS

# ---- Time before an idle TCP connection is closed during high load
#
# An idle connection is one on which no data is transferred. The door
# is considered under high load when all request processing threads
# are busy.
#
# Under high load, new connections will be configured with this timeout
# rather than the timeout defined by webdav.limits.idle-time. Currently,
# existing connections are not affected, although this may change in
# the future.
#
webdav.limits.low-resource-idle-time=30
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
webdav.limits.low-resource-idle-time.unit=SECONDS

# --- Handshake timeout
#
# SSL handshake timeout. Only supported by the https-jglobus protocol
# implementation. If a socket read takes more than this time during
# the SSL handshake, the connection is broken.
#
webdav.limits.handshake-time=10
(one-of?MILLISECONDS|SECONDS|MINUTES)\
webdav.limits.handshake-time.unit=SECONDS

# ---- TCP backlog
#
# Maximum number of TCP connections queued for accept. If the acceptor
# threads cannot keep up, up to this number of connections are queued
# before new connections are rejected.
webdav.limits.backlog=1024

# ---- Maximum number of threads used for request processing
#
# Whenever a client submits a request, the request is processed by a thread.
# This setting controls the maximum number of such threads.
#
webdav.limits.threads.max=500

# ---- Minimum number of threads used for request processing
#
# Request processing threads that have been idle for a while are terminated.
# This setting controls a minimum number of threads to keep alive even
# when idle.
webdav.limits.threads.min=1

# ---- Time before an idle request processing thread is terminated
webdav.limits.threads.idle-time=60
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
webdav.limits.threads.idle-time.unit=SECONDS

# ---- Maximum number of queued requests
#
# Once the limit is reached no new connections will be accepted;
# instead, the operating system will queue them in the TCP backlog.
# Once the TCP backlog is filled, the operating system will reject
# further TCP connections.
#
webdav.limits.queue-length=500

# ---- Shutdown timeout
#
# During shutdown no new connections will be accepted. Existing
# connections will be given this much time to complete the
# request, after which the connections are forcefully broken.
#
webdav.limits.graceful-shutdown=2
(one-of?MILLISECONDS|SECONDS|MINUTES|HOURS|DAYS)\
webdav.limits.graceful-shutdown.unit=SECONDS


#  ---- Location for static content
#
#   The WebDAV door provides HTML renderings of directories and error
#   messages. The artwork and other static content used in the HTML
#   rendering is exposed through the WebDAV door itself in a virtual
#   directory.
#
#   This parameter specifies the location to use for the virtual
#   directory. The virtual directory masks any real directory with the
#   same path in dCache's name space.
#
webdav.static-content.location=/.webdav

#  ---- Directory with default static content
#
#   The directory in the local file system containing the default
#   artwork and other static content used in the WebDAV door's HTML
#   renderings.
#
webdav.static-content.dir.default=${dcache.paths.share}/webdav/static

#  ---- Directory with custom static content
#
#   The directory in the local file system containing custom artwork
#   and other static content used in the WebDAV door's HTML
#   renderings. Any file placed in this directory masks files by the
#   same name in the default static contet directory.
#
webdav.static-content.dir.local=@webdav.static-content.dir.local@

#  ---- Base URI for static content
#
#   The base URI indicating the location of artwork and other static
#   content used in the WebDAV door's HTML renderings.
#
#   This is exposed as the string $static$ inside templates.
#
webdav.static-content.uri=${webdav.static-content.location}

#  ---- Path to HTML template for directory listing
#
#   To customize the look and feel of the HTML rendering of a
#   directory, modify a copy of this file and redefine the property to
#   point to the copy.
#
webdav.templates.html=file:${dcache.paths.share}/webdav/templates/html.stg

#
#   Document which TCP ports are opened
#
(immutable)webdav.net.ports.tcp=${webdav.net.port}

#  Flags to disable problematic crypto ciphers
#
#  See dcache.authn.ciphers for details.
(deprecated)webdav.security.ciphers=${dcache.authn.ciphers}
webdav.authn.ciphers=${webdav.security.ciphers}
