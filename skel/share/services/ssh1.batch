# Starts admin door

onerror shutdown
check -strong ssh1.paths.known-users
check -strong ssh1.paths.server-key
check -strong ssh1.paths.host-key
check -strong ssh1.paths.user-password
check -strong ssh1.net.port
check -strong ssh1.net.listen
check -strong ssh1.enable.colors
check -strong ssh1.cell.name
check ssh1.paths.history

define env failMissingServerKey.exe endDefine
   say -level=esay "The server key file ${ssh1.paths.server-key} is missing.  Please generate it with:"
   say -level=esay "     ssh-keygen -b 768 -t rsa1 -f ${ssh1.paths.server-key} -N \"\""
   exit 1
endDefine
onerror continue
test -f ${ssh1.paths.server-key}
set env have_server_key ${rc}
onerror shutdown
exec env failMissingServerKey.exe -ifnotok=have_server_key


define env failMissingHostKey.exe endDefine
   say -level=esay "The host key file ${ssh1.paths.host-key} is missing.  Please generate it with:"
   say -level=esay "     ssh-keygen -b 1024 -t rsa1 -f ${ssh1.paths.host-key} -N \"\""
   exit 1
endDefine
onerror continue
test -f ${ssh1.paths.host-key}
set env have_host_key ${rc}
onerror shutdown
exec env failMissingHostKey.exe -ifnotok=have_host_key


# The SshKeyManager uses the following hard-coded context:
#
#    hostKeyFile      - filename of the host SSH private key
#    serverKeyFile    - filename of the server SSH private key
#    knownHostsFile   - filename of rhosts-like authorised (like ~/.rhosts)
#    knownUsersFile   - filename of authorised users (like
#                       ~/.ssh/authorized_keys, must be SSHv1 keys)
#    userPasswordFile - how to authorise username/password logins
#
set context hostKeyFile "${ssh1.paths.host-key}"
set context serverKeyFile "${ssh1.paths.server-key}"
set context knownUsersFile "${ssh1.paths.known-users}"
set context userPasswordFile "${ssh1.paths.user-password}"

create dmg.cells.services.login.SshKeyManager    skm

#create dmg.cells.services.login.LoginManager slm \
#      "${ssh1.net.port}  \
#       -listen=${admin.net.listen} \
#       dmg.cells.services.StreamLoginCell \
#       -prot=ssh -auth=dmg.cells.services.login.SshSAuth_X"

create dmg.cells.services.login.LoginManager ${ssh1.cell.name} \
      "${ssh1.net.port}  \
       dmg.cells.services.login.StreamObjectCell \
       -prot=ssh -auth=dmg.cells.services.login.SshSAuth_A \
       -history=${ssh1.paths.history} \
       -listen=${ssh1.net.listen} \
       -useColors=${ssh1.enable.colors} \
       diskCacheV111.admin.UserAdminShell"

create diskCacheV111.admin.PAMAuthentificator pam " -syspassword=/etc/shadow"
