<?xml version="1.0" encoding="UTF-8" ?>

<configuration>
    <appender name="SERVER" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${alarms.dir}/server.log</File>

        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>server.%i.log</FileNamePattern>
            <MinIndex>1</MinIndex>
            <MaxIndex>3</MaxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>8MB</MaxFileSize>
        </triggeringPolicy>

        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>%d{dd MMM yyyy HH:mm:ss} %-5level %logger - %message%n</Pattern>
        </layout>
    </appender>

    <!-- DO NOT CHANGE THE NAME OF THIS APPENDER -->
    <appender name="HISTORY" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${alarms.dir}/history.log</File>

        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <FileNamePattern>history.%i.log</FileNamePattern>
            <MinIndex>1</MinIndex>
            <MaxIndex>3</MaxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <MaxFileSize>8MB</MaxFileSize>
        </triggeringPolicy>

        <encoder>
            <pattern>%-5level %d{dd MMM yyyy HH:mm:ss} \(%X{host}\)\(%X{cells.cell}\)\(%X{cells.domain}\) %m%n</pattern>
        </encoder>
    </appender>

    <!-- DO NOT CHANGE THE NAME OF THIS APPENDER -->
    <appender name="ALARM_MAIL" class="ch.qos.logback.classic.net.SMTPAppender">
        <!-- this filter ensures that only events sent marked as ALARM
             are received by this appender -->
        <filter class="org.dcache.alarms.logback.AlarmMarkerFilter"/>
        <smtpHost>${alarms.email.smtp-host}</smtpHost>
        <smtpPort>${alarms.email.smtp-port}</smtpPort>
        <STARTTLS>${alarms.email.start-tls}</STARTTLS>
        <SSL>${alarms.email.ssl}</SSL>
        <username>${alarms.email.user}</username>
        <password>${alarms.email.password}</password>
        <to>${alarms.email.to}</to>
        <from>${alarms.email.from}</from>
        <subject>${alarms.email.subject}</subject>
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%-5level %d{dd MMM yyyy HH:mm:ss} \(%X{host}\)\(%X{cells.cell}\)\(%X{cells.domain}\) %m%n</pattern>
        </layout>
        <cyclicBufferTracker class="ch.qos.logback.core.spi.CyclicBufferTrackerImpl">
            <bufferSize>${alarms.email.buffer-size}</bufferSize>
        </cyclicBufferTracker>
    </appender>

    <!-- Stores all received events; adds alarm metadata on the basis of either
         a marker or a match with one of the alarmType definitions provided;
         delegates all received events to other appenders, possibly with using a
         cloned event with an added alarm marker if it is an alarm and was not
         originally sent with one. For further information, see the dCache Book -->
    <appender name="STORE" class="org.dcache.alarms.logback.LogEntryAppender">
        <storePath>${alarms.db.xml.path}</storePath>
        <url>${alarms.db.url}</url>
        <user>${alarms.db.user}</user>
        <pass>${alarms.db.password}</pass>
        <sendEmail>${alarms.enable.email}</sendEmail>
        <writeHistory>${alarms.enable.history}</writeHistory>
        <propertiesPath>${alarms.db.config.path}</propertiesPath>
        <definitionsPath>${alarms.definitions.path}</definitionsPath>
        <appender-ref ref="HISTORY"/>
        <appender-ref ref="ALARM_MAIL"/>
    </appender>

    <logger name="ch.qos.logback" additivity="false" level="warn">
         <appender-ref ref="SERVER"/>
    </logger>

    <!-- do not change the name of this logger (used internally) -->
    <logger name="domain" additivity="false">
         <appender-ref ref="SERVER"/>
    </logger>

    <root level="${alarms.log.root-level}">
         <appender-ref ref="STORE"/>
    </root>
</configuration>
